// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\xdd\x8f\x1b\x37\x92\x7f\xd7\x5f\x51\x91\xcf\x38\x1b\x98\x28\x1e\x67\xb3\xbb\x10\xb2\x0e\x26\xb6\xf7\xe2\x83\x9d\x04\xb6\xb3\xc0\x3e\x35\xa8\xee\x6a\x35\x77\xba\xc9\x5e\x7e\x48\xa3\xfc\xf5\x87\x2a\x7e\x74\x4b\xad\x19\x49\xe3\x00\x87\x03\xce\x2f\xc9\xb0\x8b\x55\x64\x7d\xfc\x58\x55\xa4\x9e\xc0\x07\xdf\xad\x5a\x7c\xf3\xdf\xb3\x27\xf0\xe3\x0e\x3e\x08\xe7\x1a\x89\x1e\xfe\xcb\x48\x5c\xa3\x99\x3d\x81\xd7\xba\xdf\x19\xb9\x6e\x1c\x3c\x2b\x9f\xc3\xcb\x17\xd7\x7f\x9e\x50\xc1\xb3\x0f\xef\x3e\xc3\x7b\x59\xa2\xb2\xf8\x7c\xf6\x04\x4a\xad\x6a\xb9\x5e\xec\x44\xd7\xce\x66\xa2\x97\xc5\x2d\xee\xec\x72\x36\x03\x00\x78\x02\xff\xd4\xfe\xb3\x5f\x21\xdc\xfc\xfa\x0e\x6e\x71\xb7\xe0\xe1\x9d\xf6\xce\xaf\x70\x09\xf3\x79\xa2\xfb\xa4\xbd\xaa\x5e\xb7\xda\x57\xfb\xa4\x4f\xe0\xe7\x5f\x3e\xbf\x5d\xc2\xe7\x26\xf3\x00\x69\x89\x83\x81\xb2\x95\xa8\x1c\xbc\x7b\x13\x48\x2d\xb1\x28\x89\x45\x60\x3c\xab\xb0\x16\xbe\x75\xc3\x62\xde\x84\x01\x28\x75\xd7\xd1\x4c\xa7\x61\x85\x20\xfa\xbe\x95\x58\xf1\x5f\xda\xed\x8b\x7d\x57\x93\x28\xa8\x34\x28\xed\x60\x2b\x94\x03\x91\xa7\xaf\x76\x10\x45\x5c\x81\x45\x66\x87\x5d\xef\x76\x60\x9d\x91\x6a\x0d\xcf\xe6\xf3\xe7\x81\x5d\x9c\xb1\x84\xf9\x4f\xd8\xb6\xfa\x2b\x78\x07\xa2\x03\xc1\xf2\xe0\xf3\xae\x47\xf8\xaa\xc1\xb6\x87\x5a\x1b\x10\xd0\x4a\xeb\x40\xd7\x3c\x4b\xa8\xca\x2e\xe6\x93\x0d\x34\x42\x29\x6c\x99\xde\x35\x48\x7c\x58\xba\x72\x68\xc0\xf7\x5a\x91\x55\x14\x96\x4e\x6a\x75\x74\x43\x5b\x69\x9b\xc3\xd9\x71\x0a\xfd\x2f\x8d\x1a\xad\xb3\xa0\x93\xfb\x0b\x64\x63\x83\xbe\x0e\x8b\xa7\x49\xde\x22\xfd\xa7\x6f\xc5\x0e\x84\xaf\xa4\x86\x5a\xb6\x68\x17\x6c\x54\xb7\xd5\x60\x7d\xdf\x6b\xe3\xb0\x82\xb2\xd1\xb2\x44\x0b\xc2\x20\xcc\xeb\xba\xeb\x71\x3d\x07\x62\x33\x17\x9b\x52\xab\xcd\x3c\xc8\x23\x56\x68\x8a\xa8\xa0\x65\x26\x9d\xcd\x66\xff\xf6\xe8\x31\x5b\xfc\xa3\x70\x92\xb6\x23\x1c\x74\xde\x3a\x32\x77\x87\x0e\xb4\x01\xbc\x2b\x11\xab\x60\x76\x67\xe4\x9a\x5c\x5b\x80\x33\xa2\xbc\x05\x7b\x2b\xfb\x20\x88\xff\x2e\xe8\xef\xc2\x10\xab\x25\xbc\x58\x7c\xf7\x58\xe6\xb4\x6a\xb6\xed\xc0\x3f\x0d\xdd\x27\xe2\x83\xb8\x93\x9d\xef\xe2\xba\x2a\xcf\x14\x0a\xa4\x02\x8b\xa5\x26\xdf\x80\x4f\xc1\x32\x2f\xd8\x9c\x5e\x19\x24\xeb\x94\xa4\xcc\x44\x1e\x44\x75\xe2\xae\x08\xdb\x49\xe3\x4b\x78\x71\x54\x8e\x85\x1e\x4d\x5e\xda\x43\x12\x12\x8d\x3d\x10\x61\x8b\x1e\x4d\x91\xbe\x2e\xe1\xbb\x2c\xe8\x9d\x05\xdb\xf8\xba\x6e\xc9\x81\x50\x89\x55\x8b\x15\x6c\x1b\x54\xd9\x13\xad\x13\xc6\xd9\x1f\x98\x5e\x78\xa7\x3b\xe1\x64\x59\x84\x49\x58\xd0\xaa\x6b\xd1\x5a\x4c\x0c\x6f\x94\xd2\x5e\x95\x18\x55\x24\x55\xad\x4d\x17\xb4\x24\x5c\x60\x8a\x6b\xa9\x14\xc9\xd3\x75\xf4\x3f\x5a\xd9\x4a\x94\xb7\x51\x4a\x64\x51\x28\xdc\xc6\xf5\x2f\xc1\x19\x8f\xb3\xd9\x6c\x88\xa3\xec\x53\x37\x55\x65\xd0\xda\xb0\xd8\x46\xfb\xb6\x02\xe1\x1c\x45\xc6\x7e\x14\x05\x9d\x88\x40\xbd\x84\xf9\xf5\xcb\xbf\x2c\x5e\x2c\x5e\x2c\xae\x73\x8c\xfc\xaa\x8d\x3b\x93\x0d\xc5\xc7\x12\xe6\x7f\xfe\xd3\x5f\xbe\xfd\xeb\x30\x5f\x58\xbb\xd5\xa6\x62\xc3\xa4\x95\xaa\x35\xcd\xb7\x68\x36\x68\x26\xb1\xaf\x34\xf4\x71\xd2\xa9\x98\x4e\x74\xe3\xa0\xfe\xcd\xa2\x51\xa2\x43\x16\x98\x4e\x93\x40\xee\xe3\xa7\x25\xcc\xd3\x87\x3c\xed\xef\xb2\xc5\x5e\xb8\x26\x82\x81\x81\xfe\xfa\x25\x63\x40\x00\x3c\xef\x1a\x54\x4e\x96\x82\x17\x2f\x2c\x08\x30\xb8\x96\xd6\xa1\xc1\x8a\x27\x1c\xdd\x47\xe2\x21\x2d\x28\x8e\xb6\x53\x3b\x22\x4e\x45\x7f\xfd\x72\xef\xdc\x09\x9a\x4f\xce\x97\x2c\x20\x28\xc6\x2c\x96\xde\xe0\x08\x4a\x7f\xc8\x3e\x77\xec\x2b\x54\x1a\x2d\x9f\x13\x1b\x34\xb2\xde\x31\xd3\x12\x8d\x93\x35\xed\x0d\xc9\xfd\x68\x28\x98\x86\xb6\x1e\xd9\x95\x5a\x59\xda\xad\x2a\x77\x0b\x78\xe7\x68\x43\x2b\xb4\xbc\x93\x16\xc5\x06\xc1\x35\xd2\x82\x56\x57\xb0\xf2\x0e\x2a\x69\x29\x6a\x40\x3a\x90\x01\xcc\x09\x2c\x1b\xb1\x91\x6a\x1d\x19\x4a\x6b\x3d\xda\x03\x8f\x10\x49\x30\xa9\xdc\x20\x18\x1f\x82\xa2\xf3\xad\x93\x3d\x31\x54\xd6\x09\x45\xe8\xab\xeb\x03\xe3\xa6\xdd\x1e\xc4\xde\xd8\xae\xe3\x8d\x92\x59\x8e\x99\xec\x90\xe6\x7c\xd3\xd1\xcc\xb1\xd9\xee\x93\x4c\xe9\xc1\x7d\xd2\x63\xea\x70\x9e\xc0\x5b\xdc\x8d\xe5\xdd\x94\x25\x85\xbc\xd3\xb7\xa8\xe8\x3f\x20\x95\x74\x52\xb4\xf2\x77\xcc\xbe\xb3\x95\xae\x21\xb6\xbd\x30\x82\xc0\x71\xb5\x0b\x27\xb8\x3d\xb6\x18\xb1\xc7\x90\xec\x71\xde\xba\xc2\xbc\x22\xcc\x7b\xc8\x91\x13\x72\x8a\xb6\xdd\x8d\x81\xc5\xa0\x33\xbb\xb1\xd7\x8e\x5d\x43\xd4\x94\x40\x54\xd2\x0e\xae\x13\x7c\x9e\x67\x15\x11\xaf\x13\x38\x06\xc1\x3f\xe9\x2d\x74\x42\xed\xc0\xc9\x0e\x6d\x82\xb2\xc3\x80\x62\xc9\x07\x19\x46\x10\x3a\x16\x10\xa9\xed\x12\xae\x5f\x4c\xf8\xc7\x13\xef\x50\xc2\x56\x50\x24\xa8\xaf\x57\xe8\xb6\x88\xe3\xcc\x27\xee\x35\x31\x1d\x0b\x92\x94\x29\x6d\x44\xbb\x84\xef\x08\xe4\x45\xd9\x0c\x39\xc3\x6b\xfa\x0b\xac\x56\x6b\x4b\x60\xe4\x1a\xdc\xb1\x81\x2a\xbd\x55\xad\x16\x15\x56\x81\x53\xd6\xc6\x5e\x4c\xe4\x93\x54\x3b\xd1\x06\x2f\xb7\xe4\x25\x94\xcf\x31\xe3\x4a\x1a\x2c\x9d\x36\x3b\x3a\xc5\x3f\xc8\x1f\xf3\xd1\x49\xd3\x0a\xa2\x5d\xc2\x77\xd7\x2f\x33\xc6\xa3\x91\xba\x62\xec\x90\x1d\x86\x6c\x23\x6a\x00\x5b\xd1\x5b\x3a\xdf\x6a\x6d\x90\x8c\xa8\xd5\x9a\x3c\xbc\x6c\x51\x10\x72\xd6\x46\x77\x01\x84\x48\xf0\x15\xc9\x6b\xb4\x37\xd1\x1f\xf1\xae\x97\x06\x0b\xe2\xba\x84\x97\x7f\xba\x47\x5e\xd2\x2a\x8a\xb2\x81\xb2\xc1\xf2\x36\xc1\x58\xd8\x4d\xcd\xd9\x0e\x71\xaa\x40\x3a\xec\x2c\x8b\xe9\xa4\xf2\x0e\x6d\x4a\x0e\xb1\xbc\xdd\xd7\x78\xcc\x66\xb3\x26\xe8\xc0\x72\xb4\x09\x66\x1a\x39\x2d\xe0\xad\xda\x48\xa3\x15\x27\xdb\x1b\x61\x24\xe9\x3b\x04\x0b\x23\x60\x48\xdf\xbd\xc5\x0a\x1a\x34\x31\xe6\xb3\x7a\x97\x30\xff\x8f\x9f\x7e\xf9\xf0\xf6\x9b\x05\x33\xfd\xa6\x63\x44\xab\xfe\x45\x49\xe2\x46\xb7\xbe\xc3\x49\x5d\x10\x86\x23\x9f\x30\x46\xd9\x58\xb6\xc5\x7b\xbd\x25\x5c\x0e\x64\x20\xda\x56\x6f\xb1\x0a\xe4\x2d\x7f\x22\xea\x17\xd7\xd9\x73\xe5\xba\xb9\x8f\xbe\x09\xdf\x68\xc2\x5f\x67\xb3\x99\xa8\x3a\xa9\x86\x42\xe5\x2d\xbb\x16\x84\xd1\x1f\x0e\xe1\x83\x8f\x03\x69\x13\x52\xb0\xfb\x5d\x01\x85\x48\x4c\x88\xa1\x14\x8a\x54\x83\x77\x58\xfa\x08\x45\xf4\x79\x38\x4a\x8f\x46\xf2\xfb\x58\x77\xb0\x58\xa0\xc3\xfc\x10\xba\xf8\x6c\xa2\x38\xa6\x72\x86\xf3\xdb\x26\x26\x59\x4c\x4d\xa6\xe7\xc5\x71\x96\xcb\x87\xcc\x70\x8e\x6b\x4e\xf1\x22\xbf\x88\x37\x36\xa6\xcf\xb2\xeb\x35\x91\x59\x5a\x39\x9d\xa0\x71\xe5\x71\x29\xb9\x10\xe2\xd9\x2c\x6a\xc9\xff\x4b\xff\xbe\x86\xf9\x27\xdf\xa3\xa1\xdc\x84\x6c\xcb\xb5\xc5\xf2\xb8\x8f\xa1\x30\x65\xa8\x7b\x3a\x6f\x65\x09\x52\x2d\xe0\x26\x98\x85\xbe\x37\x74\xd8\xda\x06\xdb\x76\x70\xb7\x18\x9e\x44\x5e\x4c\x7d\xeb\x03\x8d\xcf\x03\x09\x5a\x2b\xd6\xe3\x95\x29\x5d\xd0\x62\x8a\x9a\x0a\xd3\x02\x8d\xd1\x66\x09\xf3\x9f\x35\x74\xc2\x95\x0d\xe1\x7a\xcc\x81\xbc\xaa\x38\x6a\x78\x4d\x59\xc8\x62\x3e\xe2\xa4\x8a\xbc\x84\xa2\x37\x58\xcb\xbb\xcc\xf0\x26\xe0\x5b\x3c\xe6\xa9\xd8\x62\xb6\xda\x3b\x2b\x2b\x06\x9e\x29\x63\x4a\x6c\x83\x4e\x07\xd8\x6b\x84\x11\x25\x17\x90\x36\xa8\xa3\x42\x2b\xd7\x8a\x8e\xd5\x44\x1c\x20\x45\x51\x86\xdd\x82\xc3\x3b\x97\x77\xbd\xef\x28\xbf\xa8\x76\x07\x5a\x21\x15\x86\x91\xe9\x33\xf2\x92\x5a\x1a\xeb\x9e\x93\x13\x91\x8c\x98\x67\xf2\x6e\x96\x30\xff\x2a\x9e\x65\x24\x8c\xf6\x7b\x4c\x9f\xb1\xba\x48\x5b\xff\x4c\x71\x1f\x4e\x4f\x9d\x6a\x17\x19\x4a\x09\xae\x03\x47\x2a\x24\x10\x90\x6a\x5d\xc4\xf4\x69\xb0\xc7\xeb\xf0\x81\x81\xd3\x1b\x83\xca\xb5\xbb\x94\x64\x55\x43\xe9\xfd\x23\xb6\x7a\x4b\x44\x43\x7d\xce\x28\x98\x34\x33\xd4\xb0\xab\xdd\x90\x3d\xc1\x5b\xc6\xcd\x18\x96\x8d\xb0\x91\x9b\x6b\x0c\x62\x6c\x9d\x78\xc3\xc1\xae\x7b\x3a\xb3\xe2\x76\x9f\x80\x68\xa5\xb0\x68\x97\x70\x93\xe5\x85\x18\xe3\x80\x89\x01\x9e\x2c\x95\xc2\x65\xb4\xa2\x45\xce\x05\x0b\x0e\xa2\x10\xea\xf0\x37\xd0\x64\x9b\x80\x2c\xcc\xe6\xc8\xdc\xab\x80\x29\xf0\x37\x42\x0d\x36\xe3\x71\xba\x24\xa3\x42\x5b\x1a\xd9\x87\x9a\xf2\xcd\xf0\x07\x1d\x54\x5b\x95\xfb\x0c\x49\x0d\xb9\xdc\xe3\x9e\x47\x1a\x95\x36\xe3\x55\xe2\x9b\x5d\x00\xfe\x21\x8c\xd4\xde\xe6\x91\x58\x75\x8b\x1d\x69\xc1\xd2\xf9\xc0\x65\xc3\xd8\x25\x47\xc7\x5f\x5c\x2d\x95\x2f\xb5\x8f\x5d\x13\x23\x94\x6d\xb9\xe2\x88\xc2\x86\x7f\x21\xe9\xe2\x34\x4f\xbb\x06\x0d\xb4\x42\xad\x3d\x7b\x39\xbc\xd1\xe4\xe2\x60\xb0\xd3\x84\x15\x89\x92\x56\xc3\x75\x26\x67\x81\x30\x7f\x3a\x87\x67\xd6\x97\x0d\x2d\x6b\xfe\xd4\xce\xaf\x60\xfe\xb4\x9a\x5f\x01\xba\x72\xf1\x7c\x22\x30\x65\x19\xd6\xaf\xac\x93\x8e\x21\x9b\xf9\x18\xaf\xf8\x14\xae\x84\x13\x0b\xf8\x48\x42\x39\xcc\x1b\xb4\x83\xf0\xad\x6c\x5b\x28\x05\x77\x59\x86\x6e\x4e\x27\xed\x0a\x09\xd0\x72\x19\x3a\x04\x52\xf2\xad\xd9\x68\x0d\x84\xa3\xa2\xaa\xe6\x93\xb1\x61\x64\x70\xa5\x90\xf1\xa4\xf1\x3d\xf3\xcf\x6f\xaa\xca\xe6\x4e\x8a\x1e\xfa\x08\xc1\x1e\x02\x3a\xac\xa4\x00\x2b\x1d\xa6\x3c\xf0\x30\x54\xa7\x91\x1f\xa3\xdf\x9b\x76\x40\x3d\xf8\xed\xe3\xfb\xdc\x77\xa1\xe8\xe3\x26\x1e\xab\x8d\x98\x8a\xaa\xca\x86\x9f\x1f\x32\xda\x88\x56\x56\x87\x60\xf2\xb3\x06\x1e\x4f\x40\xb2\x25\x6c\x09\xe0\x9c\xb9\xf6\x46\x6f\x24\x1d\x7c\xbf\x7d\x7c\xff\xcc\x3e\x3f\xe0\x1c\x19\x3a\xad\x8b\x56\xab\x75\xe6\xfc\x4f\xed\x4d\xf8\xf8\xcc\x3e\x0f\x7c\x51\xb2\x67\x39\xad\x81\x48\xb9\x28\x53\xc0\x13\x40\x97\x0c\x44\x14\x28\x04\xe4\xbd\xd1\x94\xf3\x47\xc3\x77\x0b\xf8\x59\x0f\xcc\xf8\xc8\x5a\x51\x86\x26\xaa\x0a\x0f\xb7\xaa\x15\xc6\x9e\x0f\x7f\x5d\xc2\xfc\xfb\xd5\xab\xa7\xf6\xfb\x6f\x56\xaf\x02\x3d\x7c\xbf\x7a\x75\xcd\x7f\x06\x7b\x8d\x2d\xb2\xfc\x7e\x65\x5e\x7d\x2f\x99\x5e\xbe\x0a\xe6\x7b\x6a\xf7\x05\x50\x62\x9e\xf4\xf8\x80\x88\xa7\xd5\x20\xc3\xde\x67\x76\xb6\x8d\xef\x8a\x03\x2d\x32\x47\xf3\x6a\xc2\xa5\xe4\x1c\x98\x92\x85\x15\x46\x49\x95\x67\x9f\x8a\x5a\x34\xb0\xc2\x1c\x16\x21\x85\x4f\xea\x4e\xb0\x2e\xaa\xaa\xd5\xa5\x68\xcf\x0a\x0d\xa6\x9c\xc6\x47\x7b\x2c\x40\x38\xad\x7a\x4c\x7c\x90\x62\x58\x50\xe8\x91\xee\xac\xc3\x6e\x4f\x61\x67\x84\x89\x30\x6b\x4f\x39\xf3\xd8\xb3\xd3\xd8\xe0\xc1\x54\xf7\x1d\xdd\x94\xd2\x45\x4a\x50\x0a\x3b\x76\xe3\x71\xe6\x42\x1f\x26\xd3\x86\x25\x17\x94\xe0\xc9\x12\xc7\x73\xff\x3e\x6c\x28\x7e\x05\xb1\x11\xb2\xa5\xd3\x6f\x9f\x95\x57\x94\x63\xae\x95\xfc\x1d\xab\xc2\xed\xfa\x81\x0d\xf1\xa0\x81\xa1\xd7\xc2\x2b\x82\xae\xff\x96\x74\xd9\x7d\xeb\xbf\x38\xd6\xd3\x69\x95\x15\xc5\xbb\xfa\xff\x40\xff\xbf\x1e\xe8\x0a\xef\xdc\x59\x71\x4e\x84\xd3\x30\x57\x7f\x68\x98\xef\x1d\x83\xe1\xf8\x07\x92\xcb\x95\xef\x7d\x29\xec\x93\xb4\x0d\xca\xfb\xc2\x9c\x9c\x0f\x55\x58\x4b\x85\xc1\x7b\x45\x55\x2d\x62\x2a\x4d\x95\x2f\xb7\x14\x4e\x6e\x3c\x93\x4e\xb6\x5e\xda\x0b\xb7\xfe\x8b\x77\xbd\x77\x61\x81\x7b\x0d\x90\xa1\x6d\x10\x5a\x1f\x20\xeb\x94\x97\x73\xfa\xa7\x52\xce\x9d\xbd\xee\x28\xc4\xc5\x34\x3d\xf6\x4a\xa8\x08\x48\x43\xc7\x24\x59\xf6\xcb\xc5\xcb\x0d\x49\x24\xbf\x4a\x3e\x11\xe7\xb0\x85\xce\xd0\xcf\x88\x7a\xaa\xa2\xf0\x71\x0a\x8a\xc3\xb7\x4b\xd3\xa8\xa4\xc4\xbd\x0b\x8d\x95\xf6\xa1\xdc\x4e\xfb\x4d\x97\x1e\x83\xbf\x90\x4e\x29\x65\xc7\x3b\xbe\x97\x39\x57\x97\x41\x0b\xfb\xca\x8c\xcc\x2d\x64\x6c\xb8\x8a\xf1\xb7\xda\x41\x0e\xfe\xa4\xce\x5a\x9b\x12\xed\xad\xec\x4f\xeb\x32\x93\x4e\x94\x55\x5f\xea\x6b\xef\x3a\x0e\x24\x87\xed\x8e\xaf\xd5\xec\x54\x3d\x27\x75\x30\x5c\xf2\xf5\x8c\x6b\x53\x1d\x34\xc2\x06\xec\xa5\x95\xcb\x55\x94\xd5\x9f\xd2\x44\xbe\x00\x3b\x5f\x23\x69\xca\x11\xcd\xf4\x7f\xa8\x6a\xf2\xf5\xde\x19\x09\x45\xbe\xa5\x1c\xd5\xdd\x53\x2f\x21\x84\xee\x85\x09\x2d\xa4\x63\xfc\xe1\xf0\xc2\x73\xaa\xee\x8c\x92\x97\x69\x9c\x0a\xc9\xd3\x4a\x26\xaa\x89\x5e\x9b\xc7\x06\xe6\xd0\xe8\xda\xbf\xaa\x7f\x58\x9b\x89\xb0\x68\x50\x54\x68\x86\x33\xef\x75\xea\xc7\xd0\xbe\x68\x6c\x7f\xa5\xbc\xb0\xe2\xde\xd9\x37\xdc\x27\x3b\xc2\x83\x99\xfc\x4b\x4b\xd5\x9d\x71\x06\x04\xba\x89\x8a\x68\xf8\x42\xdf\xfb\xa0\x37\x68\x73\x1b\x04\xa4\x72\x3a\xbe\xd9\x88\x86\x4e\x2f\x18\x64\x1d\xfc\xa6\x15\x3b\xbe\xfc\xe3\xeb\x59\xa7\xc1\xea\x0e\x19\xc6\x5a\x7b\xba\x34\xe4\x2a\xdd\x16\xc2\x60\xd1\xf2\x45\x9a\x1c\xe5\x64\xbf\x59\x34\xdc\x15\x12\x2a\x54\xf3\x49\x34\xe5\x09\x99\x9c\x4b\xe6\xc3\x24\x45\xaa\x82\x16\x5d\x0c\xcf\x1b\xf8\xdd\x86\xd2\x5b\xe2\x17\xf6\x13\x3e\xa5\xde\xd5\xad\x6c\xcf\x28\x26\x88\x6a\xa2\xe5\xdb\x0b\x55\xfc\xc9\xe9\x18\xd2\x7c\xcf\xa2\x2a\xee\xfb\x2b\x0b\xd2\xd9\xc3\xab\x86\x14\x27\xb4\xdd\x33\x0b\x9e\x4c\x3a\x59\x68\x7b\xb4\xe2\x79\x28\x64\xde\xd3\x51\x34\x24\xfb\xf1\x6e\x25\x34\x84\x27\xd5\xce\x49\x6b\xdb\x52\xa8\x42\x69\x35\xb4\x63\x0f\x5a\xa1\xe9\x0a\xbc\x14\x0a\x94\x56\x5f\x0f\x37\x2e\x7c\x5b\xa1\x9c\x91\x87\x09\x3d\xf3\xac\x85\x6c\xbd\x19\x15\x1b\x42\xb6\xa1\x50\x62\x56\x99\xcd\x48\x99\xf1\xb5\xc0\x59\xda\x0c\xb4\x53\x75\x92\x72\x48\x21\x47\xbf\x4c\x07\x1f\x8b\x57\xfb\x7d\xcb\x94\x5b\xe7\x8e\xe7\x3d\x39\xe7\x71\x13\x48\x15\xaa\x2a\xa9\x1c\xae\xd1\x0c\xfa\x57\xe9\x13\xc4\x4f\xb0\x15\x36\x77\x67\x8e\xb5\x4b\x38\x62\x65\xcc\xfe\x63\xe6\xbf\x3c\x91\x71\x8c\xa0\xad\xd3\x9b\x33\x80\x8d\xa8\x26\x9a\xec\x1e\x85\x69\x29\xe0\x18\xd2\xe8\x8f\x00\x72\x19\x55\x72\xd9\xb8\x91\x22\x57\xdd\xe7\x1c\xb2\x91\x41\x91\x18\x8c\x3a\x5d\x15\x92\x8a\x42\x0e\x98\xe4\x4c\x3a\x5f\x04\x60\x7a\x93\x7b\x80\x07\xba\x4e\xdc\xa9\x6e\x56\xae\xe0\xec\x70\xef\x38\xcf\xeb\x4e\x02\x72\x85\xcd\xb4\x07\xec\x48\x52\x61\x3d\x5f\x46\xd7\xbe\x0d\xa5\x6f\xbc\x3f\xc9\xa3\xed\x8e\xe9\xaa\x71\x5b\x72\x72\x74\x53\x3d\x73\x66\x0a\x9e\x49\x27\xa6\xa4\x2f\x47\x93\xef\xfd\x5a\xee\x8f\xc8\xbc\xb9\xfe\xfa\x63\xd3\xee\x42\xab\x76\xf7\x70\x6e\x45\x72\xb8\x71\x3f\x95\x7c\x58\x58\xe3\xdd\x7e\x36\x3f\x5e\xf0\x99\xa9\xbc\xf2\x5d\xb8\x88\x3d\xc3\x26\x89\x74\xaa\xfa\xf2\x0b\xca\x46\xe5\xbb\x15\x1a\x06\xab\x08\x54\xe1\x62\x58\x13\x0c\xdb\xdb\x47\x16\x8e\xca\x77\x45\xdc\xd8\xf8\xee\x68\x00\xc1\xa1\xf7\xc0\x37\xd0\xe1\x52\xba\x4a\xea\xe6\xa9\x23\x1d\x9d\x0b\xfe\x99\x74\xaa\x23\xdf\x1d\x87\xfe\xc7\xd7\x8b\xc7\xb5\xf7\x38\x98\xcf\x5d\xa5\xac\xae\xbd\x4b\xb2\x83\x96\xd2\x03\x4e\xd9\xb7\xde\x88\x36\xbf\xad\x3b\xa1\xfb\xe3\x17\x79\xcc\xb0\x17\xde\x9e\x81\xf7\x4c\x76\xa9\x06\x7f\x15\xdc\x56\xd9\x7f\x21\x78\x0e\x72\xf3\x8c\x1c\xbf\x6f\x63\xc3\xaf\xc1\xc8\x4a\x5a\x10\xad\x41\x51\xed\xc2\xf2\xab\x2b\x08\x2d\xc6\x73\xaf\x2e\xf3\xc6\xf7\x9b\x6e\x54\x22\x85\xe1\xe9\x9a\x79\x6e\xba\x7c\x3f\xad\xaf\x44\x39\xf1\x43\x83\xeb\x0b\xa3\xf8\x63\x64\x35\x9c\x94\x31\xcf\x8b\x2f\x12\x4f\xe9\x33\xaa\xaa\x18\x5e\x0e\x64\xcd\x86\x47\xd3\x51\x95\x93\x97\x05\x53\x01\x63\x1d\xb0\xee\x72\xf6\xfe\xc0\xe4\xa8\xb9\x56\x8b\x33\xd0\x2f\xd0\x4d\xb5\x76\xb1\xce\x88\x4d\xac\xcf\xd3\x9d\x30\x9f\x3b\xfc\x96\xed\x94\xca\xc2\x2a\x86\x5a\x7a\xc2\x61\xa8\xa6\xf7\x0e\xe7\x34\x6f\xd8\xb5\xc5\x33\x7a\x15\x4c\x76\xc4\x53\x2e\xde\xb4\xc5\x88\x57\xe1\x04\x5d\xed\xc2\xb5\x2a\xd7\x81\x6d\x9b\xce\x55\x7e\x0a\x74\x4a\x05\x4c\x5b\x84\x0d\x1c\xc6\x08\x8f\x4e\xa1\xc4\xa0\xf5\xe7\x14\xc5\x81\xee\x52\x30\xf9\xc8\xb3\x2e\x46\x93\x0b\xa0\x24\x54\xcc\x8f\xc1\x92\xb0\xa3\x29\x98\xc4\xf1\x7b\xd0\xc4\xa2\x4b\x3f\x63\x38\xa9\xb3\x81\x76\xda\x0e\xbd\x67\xdc\x5e\x9a\x2e\x7c\x4a\xde\x93\x7e\x8e\x51\x49\xcb\xbf\x0b\xa8\x62\xca\xa3\x73\xff\xe1\x3f\x6d\x7e\x9e\xcc\x9d\x67\x1e\x3e\xab\x55\x43\x39\x5a\xb8\xeb\x1f\xa2\x2b\x48\x1b\xff\x78\xe2\xbe\xf0\xe2\x79\x87\x89\x78\xe4\x4a\x69\xf6\xfa\x11\x5c\xe3\xbc\x74\xb7\x52\xeb\xb6\xd5\x5b\xae\x9f\x9e\xda\x64\xa9\xf0\x56\xfe\x0c\x33\x05\xc2\xa9\x2d\x1a\x5f\x1f\x19\xbc\x34\xc0\x85\xaa\x74\x27\x7f\x8f\x45\xd3\x97\xa5\x22\x4a\xbb\x02\x95\xf6\xeb\xe6\xa1\x37\x40\x0e\x02\xcd\xb1\x20\x18\xbf\x93\x11\x49\x47\x07\xc6\x89\xa3\xc9\x2a\x21\x10\xc2\xec\xc1\x1a\x91\x26\xc7\xc5\x59\x2d\xef\xa3\xdd\xee\xa3\xcd\xee\x07\x53\x94\x56\xf0\xaf\x63\x60\xa3\xc3\xf3\x09\x62\xfb\x88\x8e\x77\x3a\x64\x89\x4d\x35\xbe\xbd\x0c\x25\x5c\xc2\x18\xfe\x3c\x12\x43\x85\xc8\x01\x7f\xfa\xc7\x64\x13\x34\x39\x9c\x7c\xff\x1a\x59\x8b\x7e\xd5\x49\xe7\xd0\x14\x13\x6e\x57\xe1\x80\x4e\x04\xa1\x83\x91\x96\x72\x35\x95\xb5\x80\x4f\xb7\xb2\xe7\x2e\x90\x1c\x5a\xe0\x63\x73\x9d\xdf\x97\x7f\xb0\x25\x7f\xbc\x23\xff\x65\xf6\xfb\x5f\x6a\xcb\x3f\xde\x21\xee\x61\x78\xa9\x4f\xdc\xc3\xe6\x11\x6e\x91\x38\x5d\xec\x19\x4e\xaf\xd7\x2d\x9e\x0d\x9e\x7b\xe4\x13\xdf\x18\xbe\x1e\xfb\x74\x7c\xfc\x62\x84\xfd\x1c\x84\x0c\x8f\xfd\xd3\xef\xd7\xf2\x2f\xac\xb4\xfa\x46\xd7\xf5\xe9\x1b\x30\x66\x54\x15\xba\xae\x97\x30\xbf\xc9\xec\x06\x46\x19\xfe\x22\x29\xec\xb3\xdd\x63\xa2\xce\xe6\xa1\xf8\x29\x2a\xfb\x0b\x1a\xcb\x3f\xb2\x3a\xa5\xf6\x48\x38\xd1\xde\xe6\x4b\x0a\xe6\xe4\x85\x91\xf9\xde\x0f\x60\x4e\xe9\x2e\xad\x7c\xf8\xdd\xd3\x30\x94\x9d\x35\xba\x58\x7a\x77\x7e\x72\x93\x4c\x37\xdd\xa3\xbe\xb8\xfb\xfb\x9a\xd3\x85\xb0\xcb\xf8\x0e\x5d\xd6\x20\xd4\xf0\x20\x88\x42\x26\xf6\xfe\xae\x40\x1f\x53\x4a\x98\xc6\x97\x27\x5b\x79\xc6\x75\x4c\x2f\x8c\x1d\xdf\xc0\x10\x2c\x19\xfc\xb7\x47\x4b\xb1\x18\xd9\xed\xbd\xea\xa0\x19\xd3\x37\x2d\xde\x15\xba\x2e\x0c\x6d\x20\xf3\xfa\x07\xcf\xb6\xb9\xfd\x99\x7e\x9f\xc0\xfb\x13\xad\xc7\x74\xdd\x5f\x87\x87\x29\xaa\x1a\xff\x7d\x98\x8b\xc5\x2e\x5c\x34\xcb\x3e\x80\x26\x6d\xd9\x07\x18\x04\x9a\x51\x2e\xb7\x0f\x77\x39\x57\x1b\x94\x1f\x5b\xa0\x03\xbb\xff\x09\x00\x00\xff\xff\x26\x23\x43\x0a\x96\x3d\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 15766, mode: os.FileMode(420), modTime: time.Unix(1486057779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

