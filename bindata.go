// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x8f\xdb\x46\x92\x7f\x9f\xbf\xa2\x22\x9f\x71\x36\x30\x51\x6c\x67\xb3\xbb\x10\xb2\x0e\x26\x8e\xf7\xe2\x83\x9d\x04\xb6\xb3\xc0\x3e\x11\x2d\xb2\x28\xf6\x0e\xd9\xcd\xed\x0f\x69\x94\xbf\xfe\x50\xd5\x1f\xa4\x44\xce\x48\x9a\x04\x38\x1c\x70\x7e\x49\xa6\x59\x5d\xd5\x5d\x1f\xbf\xae\xaa\x6e\x3d\x81\x0f\xbe\x5b\xb7\xf8\xc3\x7f\x5f\x3d\x81\xef\xf7\xf0\x41\x38\xd7\x48\xf4\xf0\x5f\x46\xe2\x06\xcd\xd5\x13\x78\xa3\xfb\xbd\x91\x9b\xc6\xc1\xb3\xf2\x39\xbc\x7a\xf1\xf2\xcf\x13\x2a\x78\xf6\xe1\xdd\x67\x78\x2f\x4b\x54\x16\x9f\x5f\x3d\x81\x52\xab\x5a\x6e\x96\x7b\xd1\xb5\x57\x57\xa2\x97\xc5\x2d\xee\xed\xea\xea\x0a\x00\xe0\x09\xfc\x53\xfb\xcf\x7e\x8d\x70\xf3\xcb\x3b\xb8\xc5\xfd\x92\x87\xf7\xda\x3b\xbf\xc6\x15\x2c\x16\x89\xee\x93\xf6\xaa\x7a\xd3\x6a\x5f\x1d\x92\x3e\x81\x9f\x7e\xfe\xfc\x76\x05\x9f\x9b\xcc\x03\xa4\x25\x0e\x06\xca\x56\xa2\x72\xf0\xee\x87\x40\x6a\x89\x45\x49\x2c\x02\xe3\xab\x0a\x6b\xe1\x5b\x37\x2c\xe6\x87\x30\x00\xa5\xee\x3a\x9a\xe9\x34\xac\x11\x44\xdf\xb7\x12\x2b\xfe\x4b\xbb\x43\xb1\xef\x6a\x12\x05\x95\x06\xa5\x1d\xec\x84\x72\x20\xf2\xf4\xf5\x1e\xa2\x88\x6b\xb0\xc8\xec\xb0\xeb\xdd\x1e\xac\x33\x52\x6d\xe0\xd9\x62\xf1\x3c\xb0\x8b\x33\x56\xb0\xf8\x11\xdb\x56\x7f\x01\xef\x40\x74\x20\x58\x1e\x7c\xde\xf7\x08\x5f\x34\xd8\xf6\x50\x6b\x03\x02\x5a\x69\x1d\xe8\x9a\x67\x09\x55\xd9\xe5\x62\xb2\x81\x46\x28\x85\x2d\xd3\xbb\x06\x89\x0f\x4b\x57\x0e\x0d\xf8\x5e\x2b\xb2\x8a\xc2\xd2\x49\xad\x66\x37\xb4\x93\xb6\x39\x9e\x1d\xa7\xd0\xff\xd2\xa8\xd1\x3a\x0b\x3a\xb9\xbf\x40\x36\x36\xe8\x9b\xb0\x78\x9a\xe4\x2d\xd2\x7f\xfa\x56\xec\x41\xf8\x4a\x6a\xa8\x65\x8b\x76\xc9\x46\x75\x3b\x0d\xd6\xf7\xbd\x36\x0e\x2b\x28\x1b\x2d\x4b\xb4\x20\x0c\xc2\xa2\xae\xbb\x1e\x37\x0b\x20\x36\x0b\xb1\x2d\xb5\xda\x2e\x82\x3c\x62\x85\xa6\x88\x0a\x5a\x65\xd2\xab\xab\xab\x7f\x7b\xf4\x98\x2d\xfe\x51\x38\x49\xdb\x11\x0e\x3a\x6f\x1d\x99\xbb\x43\x07\xda\x00\xde\x95\x88\x55\x30\xbb\x33\x72\x43\xae\x2d\xc0\x19\x51\xde\x82\xbd\x95\x7d\x10\xc4\x7f\x17\xf4\x77\x61\x88\xd5\x0a\x5e\x2c\xbf\x79\x2c\x73\x5a\x35\xdb\x76\xe0\x9f\x86\xee\x13\xf1\x41\xdc\xc9\xce\x77\x71\x5d\x95\x67\x0a\x05\x52\x81\xc5\x52\x93\x6f\xc0\xa7\x60\x99\x17\x6c\x4e\xaf\x0c\x92\x75\x4a\x52\x66\x22\x0f\xa2\x3a\x71\x57\x84\xed\xa4\xf1\x15\xbc\x98\x95\x63\xa1\x47\x93\x97\xf6\x90\x84\x44\x63\x8f\x44\xd8\xa2\x47\x53\xa4\xaf\x2b\xf8\x26\x0b\x7a\x67\xc1\x36\xbe\xae\x5b\x72\x20\x54\x62\xdd\x62\x05\xbb\x06\x55\xf6\x44\xeb\x84\x71\xf6\x3b\xa6\x17\xde\xe9\x4e\x38\x59\x16\x61\x12\x16\xb4\xea\x5a\xb4\x16\x13\xc3\x1b\xa5\xb4\x57\x25\x46\x15\x49\x55\x6b\xd3\x05\x2d\x09\x17\x98\xe2\x46\x2a\x45\xf2\x74\x1d\xfd\x8f\x56\xb6\x16\xe5\x6d\x94\x12\x59\x14\x0a\x77\x71\xfd\x2b\x70\xc6\x67\x19\xef\xb5\xee\x03\x58\x8c\x38\xb1\xa3\x85\xa5\xd7\x52\x49\xdb\x60\x15\xb4\xd0\x6a\xdd\x17\x11\x18\xf2\x62\xaf\x86\x80\xcc\xce\x79\x53\x55\x06\xad\x0d\xbb\x6e\xb4\x6f\x2b\x10\xce\x51\x88\x1d\x86\x63\x60\x2b\x02\xf5\x0a\x16\x2f\x5f\xfd\x65\xf9\x62\xf9\x62\xf9\x32\x07\xdb\x2f\xda\xb8\x33\xd9\x50\xa0\xad\x60\xf1\xe7\x3f\xfd\xe5\xeb\xbf\x0e\xf3\x85\xb5\x3b\x6d\x2a\xb6\x70\x5a\xa9\xda\xd0\x7c\x8b\x66\x8b\x66\x02\x22\x4a\x43\x1f\x27\x9d\x02\x87\x44\x37\x46\x87\x5f\x2d\x1a\x25\x3a\x64\x81\xe9\x58\x0a\xe4\x3e\x7e\x5a\xc1\x22\x7d\xc8\xd3\xfe\x2e\x5b\xec\x85\x6b\x22\xaa\x18\xe8\x5f\xbe\x62\x30\x09\xc8\xe9\x5d\x83\xca\xc9\x52\xf0\xe2\x85\x05\x01\x06\x37\xd2\x3a\x34\x58\xf1\x84\xd9\x7d\x24\x1e\xd2\x82\xe2\xb0\x3d\xb5\x23\xe2\x54\xf4\x2f\x5f\x1d\x1c\x60\x41\xf3\xc9\x8b\x93\x05\x04\x05\xab\xc5\xd2\x1b\x1c\x61\xf2\x77\xd9\x79\xe7\xbe\x42\xa5\xd1\xf2\x81\xb3\x45\x23\xeb\x3d\x33\x2d\xd1\x38\x59\xd3\xde\x90\xbc\x8f\x86\x82\x69\x68\xeb\x91\x5d\xa9\x95\xa5\xdd\xaa\x72\xbf\x84\x77\x8e\x36\xb4\x46\xcb\x3b\x69\x51\x6c\x11\x5c\x23\x2d\x68\x75\x0d\x6b\xef\xa0\x92\x96\xc2\x0f\xa4\x03\x19\x4e\x05\x42\xdd\x46\x6c\xa5\xda\x44\x86\xd2\x5a\x8f\xf6\xc8\x23\x44\x12\x4c\x2a\x37\x08\xc6\x87\x98\xe8\x7c\xeb\x64\x4f\x0c\x95\x75\x42\x11\x8c\xeb\xfa\xc8\xb8\x69\xb7\x47\x41\x3c\xb6\xeb\x78\xa3\x64\x96\x39\x93\x1d\xd3\x9c\x6f\x3a\x9a\x39\x36\xdb\x7d\x92\x29\xcf\xb8\x4f\x7a\xcc\x41\xce\x13\x78\x8b\xfb\xb1\xbc\x9b\xb2\xa4\x90\x77\xfa\x16\x15\xfd\x07\xa4\x92\x4e\x8a\x56\xfe\x86\xd9\x77\x76\xd2\x35\xc4\xb6\x17\x46\x10\xca\xae\xf7\x21\x15\xb0\x73\x8b\x11\x07\x0c\xc9\x1e\xe7\xad\x2b\xcc\x2b\xc2\xbc\x87\x1c\x39\x41\xb0\x68\xdb\xfd\x18\x58\x0c\x3a\xb3\x1f\x7b\xed\xd8\x35\x44\x4d\x99\x48\x25\xed\xe0\x3a\xc1\xe7\x79\x56\x11\x81\xff\x10\x65\x7f\xd4\x3b\xe8\x84\xda\x83\x93\x1d\xda\x04\x65\xc7\x01\xc5\x92\x8f\x52\x95\x20\x74\x2c\x20\x52\xdb\x15\xbc\x7c\x31\xe1\x1f\x8f\xce\x63\x09\x3b\x41\x91\xa0\xbe\x5c\xa3\xdb\x21\x8e\x53\xa8\xb8\xd7\xc4\x74\x2c\x48\x52\xca\xb5\x15\xed\x0a\xbe\x21\x90\x17\x65\x33\x24\x1f\x6f\xe8\x2f\xb0\x5a\x6d\x2c\x81\x91\x6b\x70\xcf\x06\xaa\xf4\x4e\xb5\x5a\x54\x58\x05\x4e\x59\x1b\x07\x31\x91\x8f\x64\xed\x44\x1b\xbc\xdc\x92\x97\x50\x62\xc8\x8c\x2b\x69\xb0\x74\xda\xec\x29\x1d\xf8\x20\xbf\xcf\x67\x30\x4d\x2b\x88\x76\x05\xdf\xbc\x7c\x95\x31\x1e\x8d\xd4\x15\x63\x87\xec\x30\xa4\x2d\x51\x03\xd8\x8a\xde\xd2\x41\x59\x6b\x83\x64\x44\xad\x36\xe4\xe1\x65\x8b\x82\x90\xb3\x36\xba\x0b\x20\x44\x82\xaf\x49\x5e\xa3\xbd\x89\xfe\x88\x77\xbd\x34\x58\x10\xd7\x15\xbc\xfa\xd3\x3d\xf2\x92\x56\x51\x94\x0d\x94\x0d\x96\xb7\x09\xc6\xc2\x6e\x6a\x4e\x9b\x88\x53\x05\xd2\x61\x67\x59\x4c\x27\x95\x77\x68\x53\x96\x89\xe5\xed\xa1\xc6\x63\x5a\x9c\x35\x41\x07\x96\xa3\x4d\x30\xd3\xc8\x69\x09\x6f\xd5\x56\x1a\xad\x38\x6b\xdf\x0a\x23\x49\xdf\x21\x58\x18\x01\x43\x1d\xe0\x2d\x56\xd0\xa0\x89\x31\x9f\xd5\xbb\x82\xc5\x7f\xfc\xf8\xf3\x87\xb7\x5f\x2d\x99\xe9\x57\x1d\x23\x5a\xf5\x2f\xca\x36\xb7\xba\xf5\x1d\x4e\x0a\x8c\x30\x1c\xf9\xa4\x4c\xe0\xc5\xf2\xd5\x90\x50\xec\x08\x97\x03\x19\x88\xb6\xd5\xbb\x21\x7b\xa0\x4f\x44\xfd\xe2\x65\xf6\x5c\xb9\x69\xee\xa3\x6f\xc2\x37\x9a\xf0\xd7\xab\xab\x2b\x51\x75\x52\x0d\x15\xcf\x5b\x76\x2d\x08\xa3\xdf\x1d\xc3\x07\x1f\x07\xd2\x26\xa4\x60\xf7\xbb\x06\x0a\x91\x98\x59\x43\x29\x14\xa9\x06\xef\xb0\xf4\x11\x8a\xe8\xf3\x70\x94\xce\x46\xf2\xfb\x58\xc0\xb0\x58\xa0\xc3\xfc\x18\xba\xf8\x6c\xa2\x38\xa6\xba\x88\x13\xe5\x26\x66\x6b\x4c\x4d\xa6\xe7\xc5\x71\xba\xcc\x87\xcc\x70\x8e\x6b\xce\x15\x23\xbf\x88\x37\x36\xe6\xe1\xb2\xeb\x35\x91\x59\x5a\x39\x9d\xa0\x71\xe5\x71\x29\xb9\xa2\xe2\xd9\x2c\x6a\xc5\xff\x4b\xff\xbe\x84\xc5\x27\xdf\xa3\xa1\xdc\x84\x6c\xcb\x45\xca\x6a\xde\xc7\x50\x98\x32\x14\x50\x9d\xb7\xb2\x04\xa9\x96\x70\x13\xcc\x42\xdf\x1b\x3a\x6c\x6d\x83\x6d\x3b\xb8\x5b\x0c\x4f\x22\x2f\xa6\xbe\xf5\x81\xc6\x17\x81\x04\xad\x15\x9b\xf1\xca\x94\x2e\x68\x31\x45\x4d\x15\x6e\x81\xc6\x68\xb3\x82\xc5\x4f\x1a\x3a\xe1\xca\x86\x70\x3d\xe6\x40\x5e\x55\x1c\x35\xbc\xa6\x2c\x64\xb9\x18\x71\x52\x45\x5e\x42\xd1\x1b\xac\xe5\x5d\x66\x78\x13\xf0\x2d\x1e\xf3\x54\xb5\x31\x5b\xed\x9d\x95\x15\x03\xcf\xc3\x8c\x73\x31\x93\x18\x52\x7d\x67\xf0\xdf\x1e\x2d\xf9\x4e\x3e\xa8\x09\xcd\x61\xd9\x7d\xed\x87\x1a\x63\x60\xc4\x1b\xd5\x3d\xaa\x03\x2e\x3c\xb7\x64\xb0\xa2\xe9\x6b\x04\x22\xc1\x8a\x4a\xe3\xab\x64\xd5\x01\x78\x1b\x61\x44\xc9\xb5\xb0\x0d\x06\xa9\xd0\xca\x8d\xa2\x83\x3d\x11\x07\x50\x53\x54\x2c\xb4\xe0\xf0\xce\x65\xbd\x1f\xba\xea\xcf\xaa\xdd\x83\x56\x48\x35\x6e\x64\xfa\xcc\xf1\x8a\x8c\x75\xcf\x69\x3f\x24\x23\x66\xba\xac\xcf\x15\x2c\xbe\x88\xa7\x29\x09\x23\x8d\xcf\x59\x34\x16\x4a\xa3\x5d\x12\x1c\xd1\xf9\xad\x53\x19\x26\x43\x55\xc4\x95\xc6\x48\x45\x04\x43\x52\x6d\x8a\x98\xc0\x0d\x1e\xf1\x26\x7c\x60\xe8\xf6\xc6\xa0\x72\xed\x3e\xa5\x79\xd5\xd0\x45\xf8\x1e\x5b\xbd\x23\xa2\xa1\xd5\xc0\x38\x9c\x34\x33\x94\xe3\xeb\xfd\x90\xbf\xc1\x5b\x46\xee\x08\x0c\x8d\xb0\x91\x9b\x6b\x0c\x62\xec\x02\x79\xc3\x70\xa3\x7b\x3a\x35\xe3\x76\x9f\x80\x68\xa5\xb0\x68\x57\x70\x93\xe5\x85\x28\xe7\x90\x8d\x10\x93\x2c\x95\x02\x76\xb4\xa2\x65\xce\x46\x0b\x0e\xe3\x00\x36\xf0\x37\xd0\x64\x9b\x80\x6d\xcc\x66\x66\xee\x75\x40\x35\xf8\x1b\xe1\x16\x9b\x71\x9e\x2e\xc9\xa8\xd0\x96\x46\xf6\xa1\x3c\xfe\x61\xf8\x83\x8e\xca\x9d\xca\x2d\x93\xa4\x86\x5c\xb9\x72\xfb\x26\x8d\x4a\x9b\x11\x33\xf1\xcd\x2e\x00\xff\x10\x46\x6a\x6f\xf3\x48\x6c\x20\x88\x3d\x69\xc1\xd2\x09\xc5\x85\xcb\xd8\x25\x47\x07\x70\x5c\x2d\x15\x50\xb5\x8f\x0d\x20\x23\x94\x6d\xb9\xe6\x89\xc2\x86\x7f\x21\xed\xe3\x44\x53\xbb\x06\x0d\xb4\x42\x6d\x3c\x7b\x39\xfc\xa0\xc9\xc5\xc1\x60\xa7\x09\xad\x12\x25\xad\x86\x0b\x5d\xce\x43\x61\xf1\x74\x01\xcf\xac\x2f\x1b\x5a\xd6\xe2\xa9\x5d\x5c\xc3\xe2\x69\xb5\xb8\x06\x74\xe5\xf2\xf9\x44\x60\xca\x73\xac\x5f\x5b\x27\x1d\x1f\x1a\xcc\xc7\x78\xc5\x79\x40\x25\x9c\x58\xc2\x47\x12\xca\x40\xd3\xa0\x1d\x84\xef\x64\xdb\x42\x29\xb8\x61\x34\x34\xa6\x3a\x69\xd7\x48\x90\x9a\x0b\xe1\x21\x90\x92\x6f\x5d\x8d\xd6\x40\x48\x2e\xaa\x6a\x31\x19\x1b\x46\x06\x57\x0a\x39\x57\x1a\x3f\x30\xff\xe2\xa6\xaa\x6c\x6e\x0a\xe9\xa1\x25\x12\xec\x21\xa0\xc3\x4a\x0a\xb0\xd2\x61\xca\x44\x8f\x43\x75\x1a\xf9\x31\xfa\xbd\x69\x07\xdc\x85\x5f\x3f\xbe\xcf\x2d\x24\x8a\x3e\xee\x47\xb2\xda\x88\xa9\xa8\xaa\x6c\xf8\xc5\x31\xa3\xad\x68\x65\x75\x0c\x26\x3f\x69\xe0\xf1\x04\x24\x3b\xc2\x96\x70\x3c\x64\xae\xbd\xd1\x5b\x49\x47\xef\xaf\x1f\xdf\x3f\xb3\xcf\x8f\x38\x47\x86\x4e\xeb\xa2\xd5\x6a\x93\x39\xff\x53\x7b\x13\x3e\x3e\xb3\xcf\x03\x5f\x94\xec\x59\x4e\x6b\x20\x52\x2e\x0b\x15\xf0\x04\xd0\x25\x03\x11\x05\x0a\x21\x78\x6f\x34\x55\x1d\xd1\xf0\xdd\x12\x7e\xd2\x03\x33\x3e\x34\xd7\x94\x23\x8a\xaa\xc2\xe3\xad\x6a\x85\xb1\x7d\xc5\x5f\x57\xb0\xf8\x76\xfd\xfa\xa9\xfd\xf6\xab\xf5\xeb\x40\x0f\xdf\xae\x5f\xbf\xe4\x3f\x83\xbd\xc6\x16\x59\x7d\xbb\x36\xaf\xbf\x95\x4c\x2f\x5f\x07\xf3\x3d\xb5\x87\x02\xa8\x34\x48\x7a\x7c\x40\xc4\xd3\x6a\x90\x61\xef\x33\x3b\xdb\xc6\x77\xc5\x91\x16\x99\xa3\x79\x3d\xe1\x72\x70\xb0\x05\x49\x95\x67\x9f\x8a\x5a\x34\xb0\xc6\x1c\x16\xa1\x88\x48\xea\x4e\xb0\x2e\xaa\xaa\xd5\xa5\x68\xcf\x0a\x0d\xa6\x9c\xc6\x47\x3b\x17\x20\x9c\xd8\x3d\x26\x3e\x48\x31\x2c\x28\xb4\x7b\xf7\xd6\x61\x77\xa0\xb0\x33\xc2\x44\x98\x8d\xa7\xac\x7d\xec\xd9\x69\x6c\xf0\x60\xaa\x3c\x67\x37\xa5\x74\x91\x52\xa4\xc2\x8e\xdd\x78\x9c\x3b\xd1\x87\xc9\xb4\x61\xc9\x05\xa5\x98\xb2\xc4\xf1\xdc\xbf\x0f\x1b\x8a\x5f\x41\x6c\x85\x6c\xe9\xf4\x3b\x64\xe5\x15\x65\xb9\x1b\x25\x7f\xc3\xaa\x70\xfb\x7e\x60\x43\x3c\x68\x60\xe8\xf6\xf0\x8a\xa0\xeb\xbf\x26\x5d\x76\x5f\xfb\xdf\x1d\xeb\xe9\xb4\xca\x8a\xe2\x5d\xfd\x7f\xa0\xff\x5f\x0f\x74\x85\x77\xee\xac\x38\x27\xc2\x69\x98\xab\x3f\x34\xcc\x0f\x8e\xc1\x70\xfc\x03\xc9\xe5\xda\xfb\xbe\x14\xf6\x49\xda\x06\xe5\x7d\x61\x4e\xce\x87\x2a\xac\xa5\xc2\xe0\xbd\xa2\xaa\x96\x31\x95\xa6\xda\x9b\x9b\x1a\x27\x37\x9e\x49\x27\x5b\x2f\xed\x85\x5b\xff\xd9\xbb\xde\xbb\xb0\xc0\x83\x16\xcc\xd0\xb8\x08\xcd\x17\x90\x75\xca\xcb\x39\xfd\x53\x29\xe7\xce\x5e\x37\x0b\x71\x31\x4d\x8f\xdd\x1a\x2e\x75\xe2\xd0\x9c\x24\xcb\x7e\xb9\x7c\xb5\x25\x89\xe4\x57\xc9\x27\xe2\x1c\xb6\xd0\x19\xfa\x19\x51\x4f\x55\x14\x3e\x4e\x41\x71\xf8\x76\x69\x1a\x95\x94\x78\x70\x37\xb3\xd6\x3e\x14\xfc\x69\xbf\xe9\xfe\x66\xf0\x17\xd2\x29\xa5\xec\x78\xc7\x57\x4c\xe7\xea\x32\x68\xe1\x50\x99\x91\xb9\x85\x8c\x0d\xd7\x31\xfe\xd6\x7b\xc8\xc1\x9f\xd4\x59\x6b\x53\xa2\xbd\x95\xfd\x69\x5d\x66\xd2\x89\xb2\xea\x4b\x7d\xed\x5d\xc7\x81\xe4\xb0\xdd\xf3\x0d\xa1\x9d\xaa\xe7\xa4\x0e\x86\xfb\xca\x9e\x71\x6d\xaa\x83\x46\xd8\x80\xbd\xb4\x72\xb9\x8e\xb2\xfa\x53\x9a\xc8\x77\x79\xe7\x6b\x24\x4d\x99\xd1\x4c\xff\x87\xaa\x66\xa6\x8b\x70\x6f\x42\x31\xdb\xa3\x98\x78\x09\x21\x74\x2f\x4c\x68\x62\xcd\xf1\x87\xe3\xbb\xdb\xa9\xba\x33\x4a\x5e\xa6\x71\x2a\x24\x4f\x2b\x99\xa8\x26\x7a\x6d\x1e\x1b\x98\x43\xab\xed\xf0\xd5\xc1\xc3\xda\x4c\x84\x45\x83\xa2\x42\x33\x9c\x79\x6f\x52\x3f\x86\xf6\x45\x63\x87\x2b\xe5\x85\x15\xf7\xce\xbe\xe1\x4e\xdd\x0c\x0f\x66\xf2\x2f\x2d\x55\x77\xc6\x19\x10\xe8\x26\x2a\xa2\xe1\x0b\x7d\xef\x83\xde\xa2\xcd\x6d\x10\x90\xca\xe9\xf8\xfc\x24\x1a\x3a\x3d\xc6\x90\x75\xf0\x9b\x56\xec\xf9\xfa\x91\x6f\x9a\x9d\x06\xab\x3b\x64\x18\x6b\xed\xe9\xd2\x90\xab\x74\x5b\x08\x83\x45\xcb\x57\x79\x72\x94\x93\xfd\x6a\xd1\x70\x57\x48\xa8\x50\xcd\x27\xd1\x94\x27\x64\x72\x2e\x99\x8f\x93\x14\xa9\x0a\x5a\x74\x31\xbc\xd4\xe0\x27\x28\x4a\xef\x88\x5f\xd8\x4f\xf8\x94\x7a\x57\xb7\xb2\x3d\xa3\x98\x20\xaa\x89\x96\x6f\x2f\x54\xf1\x27\xa7\x63\x48\xf3\x4d\x8f\xaa\xf8\xe6\x41\x59\x90\xce\x1e\x5f\x76\xa4\x38\xa1\xed\x9e\x59\xf0\x64\xd2\xc9\x42\xdb\xd9\x8a\xe7\xa1\x90\x79\x4f\x47\xd1\x90\xec\xc7\xdb\x9d\xd0\x92\x9e\x54\x3b\x27\xad\x6d\x50\x54\x45\x2d\x64\xeb\xcd\xa8\x30\x10\xb2\x0d\x45\x0d\x7d\x0e\x49\xd6\x46\x6e\xf9\x9d\x41\x8b\x94\x80\xcd\x35\x60\xe9\x9f\x2d\x85\x7a\x80\x1d\x7d\x7e\x78\xae\xd2\x6a\xe8\x4d\x1f\xf5\x85\xd3\x7b\x00\x62\xa2\xb4\xfa\x72\xb8\x7e\xe2\xab\x1b\xe5\x8c\x44\x3b\xb6\x4e\x7c\x49\x71\x96\x79\x02\xed\xd4\x3e\xa4\x6d\xd2\xf0\xec\x97\xe9\xe0\x63\x01\xf0\xb0\x11\x9a\x92\xf5\xdc\x42\xbd\x27\x89\x9d\xb7\xa9\x54\xa1\x4c\x93\xca\xe1\x06\xcd\xa0\x45\x95\x3e\x41\xfc\x04\x3b\x61\x73\xbb\x67\xae\xff\xc2\x10\x20\x63\x39\x11\x4b\x89\xd5\x89\x14\x66\x84\x95\x9d\xde\x9e\x81\x94\x44\x35\xd1\x64\xf7\x28\x90\x4c\x11\xcc\x18\x49\x7f\x04\xd4\xcc\x30\x95\xeb\xd0\xad\x14\xb9\x8c\x3f\xe7\xd4\x8e\x0c\x8a\xc4\x60\xd4\x3a\xab\x90\x54\x14\x92\xca\x24\x67\xd2\x4a\x23\x44\xd4\xdb\xdc\x54\x3c\xd2\x75\xe2\x4e\x85\xb8\x72\x05\xa7\x9b\x07\xf9\x41\x5e\x77\x12\x90\x4b\x76\xa6\x3d\x62\x47\x92\x0a\xeb\xf9\x7e\xbd\xf6\x6d\xa8\xa5\xe3\x95\x50\x1e\x6d\xf7\x4c\x57\x8d\xfb\x9c\x93\x5c\x80\x0a\xa4\x33\x73\xfa\x4c\x3a\x31\x25\x7d\x99\xcd\xe6\x0f\x8b\xc3\x3f\x22\x95\xe7\x82\xee\x8f\xcd\xe3\x0b\xad\xda\xfd\xc3\xc9\x1a\xc9\xe1\x9b\x80\xa9\xe4\xe3\x4a\x1d\xef\x0e\xcb\x83\xf1\x82\xcf\xac\x0d\x94\xef\xc2\xdd\xf2\x19\x36\x49\xa4\x53\xd5\x97\xbf\xa3\x0e\x55\xbe\x5b\xa3\x61\xb0\x8a\x40\x15\xee\xba\x35\x81\xbb\xbd\x7d\x64\x25\xaa\x7c\x57\xc4\x8d\x8d\x2f\xa3\x06\x10\x1c\x9a\x19\x7c\xa9\x1e\xee\xd9\xab\xa4\x6e\x9e\x3a\xd2\xd1\xb9\xe0\x9f\x49\xa7\x3a\xf2\xdd\x3c\xf4\x3f\xbe\x00\x9d\xd7\xde\xe3\x60\x3e\xb7\xa9\xb2\xba\x0e\x6e\xdd\x8e\x7a\x54\x0f\x38\x65\xdf\x7a\x23\xda\xfc\xee\xf0\x84\xee\xe7\x6f\x06\x99\x61\x2f\xbc\x3d\x03\xef\x99\xec\x52\x0d\xfe\x22\xb8\x4f\x73\xf8\x7a\xf2\x1c\xe4\xe6\x19\x39\x7e\xdf\xc6\x0e\x62\x83\x91\x95\xb4\x20\x5a\x4a\x73\xf6\x61\xf9\xd5\x35\x84\x9e\xe5\xb9\x77\xa1\x79\xe3\x87\x5d\x3c\xaa\xb9\xc2\xf0\x74\xcd\x3c\x37\xbd\x27\x38\xad\xaf\x44\x39\xf1\x43\x83\x9b\x0b\xa3\xf8\x63\x64\x35\x9c\x94\x31\x71\x8c\x8f\x2c\x4f\xe9\x33\xaa\xaa\x18\x1e\x43\x64\xcd\x86\x07\xe5\x51\x95\x93\xc7\x12\x53\x01\x63\x1d\xb0\xee\x72\x39\xf0\xc0\xe4\xa8\xb9\x56\x8b\x33\xd0\x2f\xd0\x4d\xb5\x76\xb1\xce\x88\x4d\x2c\xf8\xd3\x25\x33\x9f\x3b\xfc\x3c\xef\x74\x86\x1d\x5e\x5a\xa5\xc3\x63\xc2\x61\x28\xcf\x0f\x0e\xe7\x34\x6f\xd8\xb5\xc5\x33\x9a\x1f\x4c\x36\xe3\x29\x17\x6f\xda\x62\xc4\xab\x70\x82\xae\xf7\xe1\x9e\x96\x0b\xcb\xb6\x4d\xe7\x2a\xbf\x6e\x3a\xa5\x02\xa6\x2d\xc2\x06\x8e\x63\x84\x47\xa7\x50\x62\xd0\xfa\x73\xaa\xec\x40\x77\x29\x98\x7c\xe4\x59\x17\xa3\xc9\x05\x50\x12\x4a\xf0\xc7\x60\x49\xd8\xd1\x14\x4c\xe2\xf8\x3d\x68\x62\xd1\xa5\x9f\x78\x9c\xd4\xd9\x40\x3b\xed\xaf\xde\x33\x6e\x2f\x4d\x17\x3e\x25\xef\x49\x3f\x55\xa9\xa4\xe5\xdf\x4c\x54\x31\xe5\xd1\xb9\xa1\xf1\x9f\x36\xbf\xb8\xe6\x56\x36\x0f\x9f\xd5\xfb\xa1\x1c\x2d\x3c\x1e\x18\xa2\x2b\x48\x1b\xff\xb0\xe4\xbe\xf0\xe2\x79\xc7\x89\x78\xe4\x4a\x69\xf6\xe6\x11\x5c\xe3\xbc\x74\x59\x53\xeb\xb6\xd5\x3b\xae\x9f\x9e\xda\x64\xa9\xf0\x3b\x82\x33\xcc\x14\x08\xa7\xb6\x68\x7c\x3d\x33\x78\x69\x80\x0b\x55\xe9\x4e\xfe\x16\x8b\xa6\xdf\x97\x8a\x28\xed\x0a\x54\xda\x6f\x9a\x87\x1e\x15\x39\x08\x34\x73\x41\x30\x7e\x78\x23\x92\x8e\x8e\x1b\x04\x61\x34\x59\x25\x04\x42\x98\x3d\x58\x23\xd2\xe4\xb8\x38\xab\x87\x3e\xdb\x3e\x9f\xed\x9e\x3f\x98\xa2\xb4\x82\x7f\x39\x04\x5b\x1d\xde\x63\x10\xdb\x47\xb4\xd0\xd3\x21\x4b\x6c\xaa\xf1\x75\x68\x28\xe1\x12\xc6\xf0\xe7\x91\x18\x2a\x44\x8e\xf8\xd3\x3f\x26\x9b\xa0\xc9\xf1\xe4\xfb\xd7\xc8\x5a\xf4\xeb\x4e\x3a\x87\xa6\x98\x70\xbb\x0e\x07\x74\x22\x08\x1d\x8c\xb4\x94\xeb\xa9\xac\x25\x7c\xba\x95\x3d\xf7\x72\xe4\xd0\x53\x1f\x9b\xeb\xfc\x46\xff\x83\x3d\xfe\xf9\x16\xff\xef\xb3\xdf\xff\x52\x9f\xff\xf1\x0e\x71\x0f\xc3\x4b\x7d\xe2\x1e\x36\x8f\x70\x8b\xc4\xe9\x62\xcf\x70\x7a\xb3\x69\xf1\x6c\xf0\x3c\x20\x9f\xf8\xc6\xf0\x75\xee\xd3\xfc\xf8\xc5\x08\xfb\x39\x08\x19\x7e\xbf\x90\x7e\xdb\x97\x7f\x7d\xa6\xd5\x57\xba\xae\x4f\x5f\xa9\x31\xa3\xaa\xd0\x75\xbd\x82\xc5\x4d\x66\x37\x30\xca\xf0\x17\x49\xe1\x90\xed\x01\x13\x75\x36\x0f\xc5\x6f\x5b\xd9\x5f\xd0\x58\xfe\xdd\xd8\x29\xb5\x47\xc2\x89\xf6\xb6\xbf\xa7\x60\x4e\x5e\x18\x99\x1f\xfc\xa6\xe7\x94\xee\xd2\xca\x87\x9f\x72\x0d\x43\xd9\x59\xa3\x8b\xa5\xa7\xf4\x27\x37\xc9\x74\xd3\x3d\xea\x8b\xbb\xbf\x6f\x38\x5d\x08\xbb\x8c\x4f\xeb\x65\x0d\x42\x0d\x2f\x8c\x28\x64\x62\xef\xef\x1a\xf4\x9c\x52\xc2\x34\xbe\x8d\xd9\xc9\x33\xee\x77\x7a\x61\xec\xf8\x4a\xe7\xf0\x89\x74\x64\x77\xf0\x4c\x84\x66\x4c\x1f\xc9\x78\x57\xe8\xba\x30\xb4\x81\xcc\xeb\x1f\x3c\xdb\xe6\xf6\x67\xfa\xc9\x05\xef\x4f\xb4\x1e\xd3\xfb\x81\x3a\xbc\x74\x51\xd5\xf8\xef\xe3\x5c\x2c\x76\xe1\xa2\x59\x0e\x01\x34\x69\xcb\x3e\xc0\x20\xd0\x8c\x72\xb9\x43\xb8\xcb\xb9\xda\xa0\xfc\xd8\x02\x1d\xd8\xfd\x4f\x00\x00\x00\xff\xff\x3f\x68\x8d\xa7\xb2\x3e\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 16050, mode: os.FileMode(420), modTime: time.Unix(1494892783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

