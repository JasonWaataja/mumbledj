// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x8f\xdc\x36\x92\xef\xf3\x2b\x2a\xed\x33\xce\x06\x26\x9d\x19\x67\xb3\xbb\x68\x78\x1d\x4c\x6c\xef\xc5\x07\x3b\x09\x6c\x67\x81\x7d\x12\xd8\x52\xa9\xc5\x1d\x89\x54\x48\xaa\x7b\x3a\xbf\xfe\x50\xc5\x0f\x49\x2d\xcd\x74\xf7\x38\xb8\xc3\x01\x3b\x2f\x76\x93\xc5\x2a\xb2\xbe\xab\x48\x3d\x81\x0f\x5d\xb3\xae\xf1\xcd\x7f\x5f\x3c\x81\x1f\xf6\xf0\x41\x38\x57\x49\xec\xe0\xbf\x8c\xc4\x0d\x9a\x8b\x27\xf0\x5a\xb7\x7b\x23\x37\x95\x83\x67\xf9\x73\x78\x71\x75\xfd\xe7\x09\x14\x3c\xfb\xf0\xee\x33\xbc\x97\x39\x2a\x8b\xcf\x2f\x9e\x40\xae\x55\x29\x37\xcb\xbd\x68\xea\x8b\x0b\xd1\xca\xec\x16\xf7\x76\x75\x71\x01\x00\xf0\x04\xfe\xa9\xbb\xcf\xdd\x1a\xe1\xe6\x97\x77\x70\x8b\xfb\x25\x0f\xef\x75\xe7\xba\x35\xae\x60\xb1\x88\x70\x9f\x74\xa7\x8a\xd7\xb5\xee\x8a\x31\xe8\x13\xf8\xe9\xe7\xcf\x6f\x57\xf0\xb9\x4a\x38\x40\x5a\xc2\x60\x20\xaf\x25\x2a\x07\xef\xde\x78\x50\x4b\x28\x72\x42\xe1\x11\x5f\x14\x58\x8a\xae\x76\xfd\x66\xde\xf8\x01\xc8\x75\xd3\xd0\x4a\xa7\x61\x8d\x20\xda\xb6\x96\x58\xf0\x2f\xed\xc6\x64\xdf\x95\x44\x0a\x0a\x0d\x4a\x3b\xd8\x09\xe5\x40\xa4\xe5\xeb\x3d\x04\x12\x97\x60\x91\xd1\x61\xd3\xba\x3d\x58\x67\xa4\xda\xc0\xb3\xc5\xe2\xb9\x47\x17\x56\xac\x60\xf1\x23\xd6\xb5\xfe\x0a\xde\x81\x68\x40\x30\x3d\xf8\xbc\x6f\x11\xbe\xaa\xb0\x6e\xa1\xd4\x06\x04\xd4\xd2\x3a\xd0\x25\xaf\x12\xaa\xb0\xcb\xc5\xe4\x00\x95\x50\x0a\x6b\x86\x77\x15\x12\x1e\xa6\xae\x1c\x1a\xe8\x5a\xad\x48\x2a\x0a\x73\x27\xb5\x9a\x3d\xd0\x4e\xda\xea\x70\x75\x58\x42\xff\xa5\x51\xa3\x75\x22\x74\xf4\x7c\x1e\x6c\x28\xd0\xd7\x7e\xf3\xb4\xa8\xb3\x48\xff\xb4\xb5\xd8\x83\xe8\x0a\xa9\xa1\x94\x35\xda\x25\x0b\xd5\xed\x34\xd8\xae\x6d\xb5\x71\x58\x40\x5e\x69\x99\xa3\x05\x61\x10\x16\x65\xd9\xb4\xb8\x59\x00\xa1\x59\x88\x6d\xae\xd5\x76\xe1\xe9\x11\x2a\x34\x59\x60\xd0\x2a\x81\x5e\x5c\x5c\xfc\xd6\x61\x87\x49\xe2\x1f\x85\x93\x74\x1c\xe1\xa0\xe9\xac\x23\x71\x37\xe8\x40\x1b\xc0\xbb\x1c\xb1\xf0\x62\x77\x46\x6e\x48\xb5\x05\x38\x23\xf2\x5b\xb0\xb7\xb2\xf5\x84\xf8\x77\x46\xbf\x33\x43\xa8\x56\x70\xb5\xfc\xee\xb1\xc8\x69\xd7\x2c\xdb\x1e\x7f\x1c\xba\x8f\xc4\x07\x71\x27\x9b\xae\x09\xfb\x2a\x3a\x86\x50\x20\x15\x58\xcc\x35\xe9\x06\x7c\xf2\x92\xb9\x62\x71\x76\xca\x20\x49\x27\x27\x66\x46\x70\x4f\xaa\x11\x77\x99\x3f\x4e\x1c\x5f\xc1\xd5\x2c\x1d\x0b\x2d\x9a\xb4\xb5\x87\x28\x44\x18\x7b\x40\xc2\x66\x2d\x9a\x2c\xce\xae\xe0\xbb\x44\xe8\x9d\x05\x5b\x75\x65\x59\x93\x02\xa1\x12\xeb\x1a\x0b\xd8\x55\xa8\x92\x26\x5a\x27\x8c\xb3\xdf\x33\xbc\xe8\x9c\x6e\x84\x93\x79\xe6\x17\x61\x46\xbb\x2e\x45\x6d\x31\x22\xbc\x51\x4a\x77\x2a\xc7\xc0\x22\xa9\x4a\x6d\x1a\xcf\x25\xe1\x3c\x52\xdc\x48\xa5\x88\x9e\x2e\x83\xfe\xd1\xce\xd6\x22\xbf\x0d\x54\x02\x8a\x4c\xe1\x2e\xec\x7f\x05\xce\x74\x89\xc6\x7b\xad\x5b\xef\x2c\x06\x98\x58\xd1\xfc\xd6\x4b\xa9\xa4\xad\xb0\xf0\x5c\xa8\xb5\x6e\xb3\xe0\x18\xd2\x66\x2f\x7a\x83\x4c\xca\x79\x53\x14\x06\xad\xf5\xa7\xae\x74\x57\x17\x20\x9c\x23\x13\x1b\x9b\xa3\x47\x2b\x3c\xf4\x0a\x16\xd7\x2f\xfe\xb2\xbc\x5a\x5e\x2d\xaf\x93\xb1\xfd\xa2\x8d\x3b\x11\x0d\x19\xda\x0a\x16\x7f\xfe\xd3\x5f\xbe\xfd\x6b\xbf\x5e\x58\xbb\xd3\xa6\x60\x09\xc7\x9d\xaa\x0d\xad\xb7\x68\xb6\x68\x26\x4e\x44\x69\x68\xc3\xa2\x63\xce\x21\xc2\x0d\xbd\xc3\xaf\x16\x8d\x12\x0d\x32\xc1\x18\x96\x3c\x78\x17\xa6\x56\xb0\x88\x13\x69\xd9\xdf\x65\x8d\xad\x70\x55\xf0\x2a\x06\xda\xeb\x17\xec\x4c\xbc\xe7\xec\x5c\x85\xca\xc9\x5c\xf0\xe6\x85\x05\x01\x06\x37\xd2\x3a\x34\x58\xf0\x82\xd9\x73\x44\x1c\xd2\x82\x62\xb3\x3d\x76\x22\xc2\x94\xb5\xd7\x2f\x46\x01\xcc\x73\x3e\x6a\x71\x94\x80\x20\x63\xb5\x98\x77\x06\x07\x3e\xf9\xfb\xa4\xbc\x73\xb3\x50\x68\xb4\x1c\x70\xb6\x68\x64\xb9\x67\xa4\x39\x1a\x27\x4b\x3a\x1b\x92\xf6\xd1\x90\x17\x0d\x1d\x3d\xa0\xcb\xb5\xb2\x74\x5a\x95\xef\x97\xf0\xce\xd1\x81\xd6\x68\xf9\x24\x35\x8a\x2d\x82\xab\xa4\x05\xad\x2e\x61\xdd\x39\x28\xa4\x25\xf3\x03\xe9\x40\xfa\xa8\x40\x5e\xb7\x12\x5b\xa9\x36\x01\xa1\xb4\xb6\x43\x7b\xa0\x11\x22\x12\x26\x96\x1b\x04\xd3\x79\x9b\x68\xba\xda\xc9\x96\x10\x2a\xeb\x84\x22\x37\xae\xcb\x03\xe1\xc6\xd3\x1e\x18\xf1\x50\xae\xc3\x83\x92\x58\xe6\x44\x76\x08\x73\xba\xe8\x68\xe5\x50\x6c\xf7\x51\xa6\x3c\xe3\x3e\xea\x21\x07\x39\x8d\xe0\x2d\xee\x87\xf4\x6e\xf2\x9c\x4c\xde\xe9\x5b\x54\xf4\x0f\x48\x25\x9d\x14\xb5\xfc\x1d\x93\xee\xec\xa4\xab\x08\x6d\x2b\x8c\x20\x2f\xbb\xde\xfb\x54\xc0\xce\x6d\x46\x8c\x10\x92\x3c\x4e\xdb\x97\x5f\x97\xf9\x75\x0f\x29\x72\x74\xc1\xa2\xae\xf7\x43\xc7\x62\xd0\x99\xfd\x50\x6b\x87\xaa\x21\x4a\xca\x44\x0a\x69\x7b\xd5\xf1\x3a\xcf\xab\xb2\xe0\xf8\xc7\x5e\xf6\x47\xbd\x83\x46\xa8\x3d\x38\xd9\xa0\x8d\xae\xec\xd0\xa0\x98\xf2\x41\xaa\xe2\x89\x0e\x09\x04\x68\xbb\x82\xeb\xab\x09\xfe\x10\x3a\x0f\x29\xec\x04\x59\x82\xfa\x7a\x8d\x6e\x87\x38\x4c\xa1\xc2\x59\x23\xd2\x21\x21\x49\x29\xd7\x56\xd4\x2b\xf8\x8e\x9c\xbc\xc8\xab\x3e\xf9\x78\x4d\xbf\xc0\x6a\xb5\xb1\xe4\x8c\x5c\x85\x7b\x16\x50\xa1\x77\xaa\xd6\xa2\xc0\xc2\x63\x4a\xdc\x18\xd9\x44\x0a\xc9\xda\x89\xda\x6b\xb9\x25\x2d\xa1\xc4\x90\x11\x17\xd2\x60\xee\xb4\xd9\x53\x3a\xf0\x41\xfe\x90\x62\x30\x2d\xcb\x08\x76\x05\xdf\x5d\xbf\x48\x3e\x1e\x8d\xd4\x05\xfb\x0e\xd9\xa0\x4f\x5b\x02\x07\xb0\x16\xad\xa5\x40\x59\x6a\x83\x24\x44\xad\x36\xa4\xe1\x79\x8d\x82\x3c\x67\x69\x74\xe3\x9d\x10\x11\xbe\x24\x7a\x95\xee\x4c\xd0\x47\xbc\x6b\xa5\xc1\x8c\xb0\xae\xe0\xc5\x9f\xee\xa1\x17\xb9\x8a\x22\xaf\x20\xaf\x30\xbf\x8d\x6e\xcc\x9f\xa6\xe4\xb4\x89\x30\x15\x20\x1d\x36\x96\xc9\x34\x52\x75\x0e\x6d\xcc\x32\x31\xbf\x1d\x73\x3c\xa4\xc5\x89\x13\x14\xb0\x1c\x1d\x82\x91\x06\x4c\x4b\x78\xab\xb6\xd2\x68\xc5\x59\xfb\x56\x18\x49\xfc\xf6\xc6\xc2\x1e\xd0\xd7\x01\x9d\xc5\x02\x2a\x34\xc1\xe6\x13\x7b\x57\xb0\xf8\x8f\x1f\x7f\xfe\xf0\xf6\x9b\x25\x23\xfd\xa6\x61\x8f\x56\xfc\x8b\xb2\xcd\xad\xae\xbb\x06\x27\x05\x86\x1f\x0e\x78\x62\x26\x70\xb5\x7c\xd1\x27\x14\x3b\xf2\xcb\x1e\x0c\x44\x5d\xeb\x5d\x9f\x3d\xd0\x14\x41\x5f\x5d\x27\xcd\x95\x9b\xea\x3e\xf8\xca\xcf\xd1\x82\xbf\x5e\x5c\x5c\x88\xa2\x91\xaa\xaf\x78\xde\xb2\x6a\x81\x1f\xfd\xfe\xd0\x7d\x70\x38\x90\x36\x7a\x0a\x56\xbf\x4b\x20\x13\x09\x99\x35\xe4\x42\x11\x6b\xf0\x0e\xf3\x2e\xb8\x22\x9a\xee\x43\xe9\xac\x25\xbf\x0f\x05\x0c\x93\x05\x0a\xe6\x87\xae\x8b\x63\x13\xd9\x31\xd5\x45\x9c\x28\x57\x21\x5b\x63\x68\x12\x3d\x6f\x8e\xd3\x65\x0e\x32\x7d\x1c\xd7\x9c\x2b\x06\x7c\xc1\xdf\xd8\x90\x87\xcb\xa6\xd5\x04\x66\x69\xe7\x14\x41\xc3\xce\xc3\x56\x52\x45\xc5\xab\x99\xd4\x8a\xff\x4b\x7f\x5f\xc3\xe2\x53\xd7\xa2\xa1\xdc\x84\x64\xcb\x45\xca\x6a\x5e\xc7\x50\x98\xdc\x17\x50\x4d\x67\x65\x0e\x52\x2d\xe1\xc6\x8b\x85\xe6\x2b\x0a\xb6\xb6\xc2\xba\xee\xd5\x2d\x98\x27\x81\x67\x53\xdd\xfa\x40\xe3\x0b\x0f\x82\xd6\x8a\xcd\x70\x67\x4a\x67\xb4\x99\xac\xa4\x0a\x37\x43\x63\xb4\x59\xc1\xe2\x27\x0d\x8d\x70\x79\x45\x7e\x3d\xe4\x40\x9d\x2a\xd8\x6a\x78\x4f\x89\xc8\x72\x31\xc0\xa4\xb2\xb4\x85\xac\x35\x58\xca\xbb\x84\xf0\xc6\xfb\xb7\x10\xe6\xa9\x6a\x63\xb4\xba\x73\x56\x16\xec\x78\x1e\x46\x9c\x8a\x99\x88\x90\xea\x3b\x83\xbf\x75\x68\x49\x77\x52\xa0\x26\x6f\x0e\xcb\xe6\xdb\xae\xaf\x31\x7a\x44\x7c\x50\xdd\xa2\x1a\x61\xe1\xb5\x39\x3b\x2b\x5a\xbe\x46\x20\x10\x2c\xa8\x34\xbe\x88\x52\xed\x1d\x6f\x25\x8c\xc8\xb9\x16\xb6\x5e\x20\x05\x5a\xb9\x51\x14\xd8\x23\xb0\x77\x6a\x8a\x8a\x85\x1a\x1c\xde\xb9\xc4\xf7\xb1\xaa\xfe\xac\xea\x3d\x68\x85\x54\xe3\x06\xa4\xcf\x1c\xef\xc8\x58\xf7\x9c\xce\x43\x34\x42\xa6\xcb\xfc\x5c\xc1\xe2\xab\x10\x4d\x89\x18\x71\x7c\x4e\xa2\xa1\x50\x1a\x9c\x92\xdc\x11\xc5\x6f\x1d\xcb\x30\xe9\xab\x22\xae\x34\x06\x2c\x22\x37\x24\xd5\x26\x0b\x09\x5c\xaf\x11\xaf\xfd\x04\xbb\xee\xce\x18\x54\xae\xde\xc7\x34\xaf\xe8\xbb\x08\x3f\x60\xad\x77\x04\xd4\xb7\x1a\xd8\x0f\x47\xce\xf4\xe5\xf8\x7a\xdf\xe7\x6f\xf0\x96\x3d\x77\x70\x0c\x95\xb0\x01\x9b\xab\x0c\x62\xe8\x02\x75\x86\xdd\x8d\x6e\x29\x6a\x86\xe3\x3e\x01\x51\x4b\x61\xd1\xae\xe0\x26\xd1\xf3\x56\xce\x26\x1b\x5c\x4c\x94\x54\x34\xd8\xc1\x8e\x96\x29\x1b\xcd\xd8\x8c\xbd\xb3\x81\xbf\x81\x26\xd9\x78\xdf\xc6\x68\x66\xd6\x5e\x7a\xaf\x06\x7f\x23\xbf\xc5\x62\x9c\x87\x8b\x34\x0a\xb4\xb9\x91\xad\x2f\x8f\xdf\xf4\x3f\x28\x54\xee\x54\x6a\x99\x44\x36\xa4\xca\x95\xdb\x37\x71\x54\xda\xe4\x31\x23\xde\xa4\x02\xf0\x0f\x61\xa4\xee\x6c\x1a\x09\x0d\x04\xb1\x27\x2e\x58\x8a\x50\x5c\xb8\x0c\x55\x72\x10\x80\xc3\x6e\xa9\x80\x2a\xbb\xd0\x00\x32\x42\xd9\x9a\x6b\x9e\x40\xac\xff\xf3\x69\x1f\x27\x9a\xda\x55\x68\xa0\x16\x6a\xd3\xb1\x96\xc3\x1b\x4d\x2a\x0e\x06\x1b\x4d\xde\x2a\x42\xd2\x6e\xb8\xd0\xe5\x3c\x14\x16\x4f\x17\xf0\xcc\x76\x79\x45\xdb\x5a\x3c\xb5\x8b\x4b\x58\x3c\x2d\x16\x97\x80\x2e\x5f\x3e\x9f\x10\x8c\x79\x8e\xed\xd6\xd6\x49\xc7\x41\x83\xf1\x98\x4e\x71\x1e\x50\x08\x27\x96\xf0\x91\x88\xb2\xa3\xa9\xd0\xf6\xc4\x77\xb2\xae\x21\x17\xdc\x30\xea\x1b\x53\x8d\xb4\x6b\x24\x97\x9a\x0a\xe1\xde\x90\xa2\x6e\x5d\x0c\xf6\x40\x9e\x5c\x14\xc5\x62\x32\xd6\x8f\xf4\xaa\xe4\x73\xae\x38\x3e\x12\xff\xe2\xa6\x28\x6c\x6a\x0a\xe9\xbe\x25\xe2\xe5\x21\xa0\xc1\x42\x0a\xb0\xd2\x61\xcc\x44\x0f\x4d\x75\x6a\xf9\xc1\xfa\x3b\x53\xf7\x7e\x17\x7e\xfd\xf8\x3e\xb5\x90\xc8\xfa\xb8\x1f\xc9\x6c\x23\xa4\xa2\x28\x92\xe0\x17\x87\x88\xb6\xa2\x96\xc5\xa1\x33\xf9\x49\x03\x8f\x47\x47\xb2\x23\xdf\xe2\xc3\x43\xc2\xda\x1a\xbd\x95\x14\x7a\x7f\xfd\xf8\xfe\x99\x7d\x7e\x80\x39\x20\x74\x5a\x67\xb5\x56\x9b\x84\xf9\x9f\xba\x33\x7e\xf2\x99\x7d\xee\xf1\xa2\x64\xcd\x72\x5a\x03\x81\x72\x59\xa8\x80\x17\x80\xce\xd9\x11\x91\xa1\x90\x07\x6f\x8d\xa6\xaa\x23\x08\xbe\x59\xc2\x4f\xba\x47\xc6\x41\x73\x4d\x39\xa2\x28\x0a\x3c\x3c\xaa\x56\x18\xda\x57\x3c\xbb\x82\xc5\xcb\xf5\xab\xa7\xf6\xe5\x37\xeb\x57\x1e\x1e\x5e\xae\x5f\x5d\xf3\x4f\x2f\xaf\xa1\x44\x56\x2f\xd7\xe6\xd5\x4b\xc9\xf0\xf2\x95\x17\xdf\x53\x3b\x26\x40\xa5\x41\xe4\xe3\x03\x24\x9e\x16\x3d\x0d\x7b\x9f\xd8\x59\x36\x5d\x93\x1d\x70\x91\x31\x9a\x57\x13\x2c\xa3\xc0\xe6\x29\x15\x1d\xeb\x54\xe0\xa2\x81\x35\x26\xb3\xf0\x45\x44\x64\x77\x74\xeb\xa2\x28\x6a\x9d\x8b\xfa\x24\xd3\x60\xc8\xa9\x7d\xd4\x73\x06\xc2\x89\xdd\x63\xec\x83\x18\xc3\x84\x7c\xbb\x77\x6f\x1d\x36\x23\x86\x9d\x60\x26\xc2\x6c\x3a\xca\xda\x87\x9a\x1d\xc7\x7a\x0d\xa6\xca\x73\xf6\x50\x4a\x67\x31\x45\xca\xec\x50\x8d\x87\xb9\x13\x4d\x4c\x96\xf5\x5b\xce\x28\xc5\x94\x39\x0e\xd7\xfe\xbd\x3f\x50\x98\x05\xb1\x15\xb2\xa6\xe8\x37\x46\xd5\x29\xca\x72\x37\x4a\xfe\x8e\x45\xe6\xf6\x6d\x8f\x86\x70\xd0\x40\xdf\xed\xe1\x1d\x41\xd3\x7e\x4b\xbc\x6c\xbe\xed\xbe\xd8\xd6\x63\xb4\x4a\x8c\xe2\x53\xfd\xdb\xd0\xff\xbf\x1b\xba\xc2\x3b\x77\x92\x9d\x13\xe0\xd4\xcc\xd5\x1f\x6a\xe6\xa3\x30\xe8\xc3\x3f\x10\x5d\xae\xbd\xef\x4b\x61\x9f\xc4\x63\x50\xde\xe7\xd7\xa4\x7c\xa8\xc0\x52\x2a\xf4\xda\x2b\x8a\x62\x39\x3a\xf6\xe9\x3e\x2e\x41\xcf\x30\xe0\x7f\xc1\xd1\x1d\xe3\x84\xaf\x0f\x44\x5e\x21\x77\x6a\x8e\x9e\x28\x81\x4e\x8e\x93\xdb\x33\x4f\xf3\x73\xe7\xda\xce\xf9\xfd\x8d\xfa\x4a\x7d\x37\xc6\x77\x94\x40\x96\xb1\xd8\xe0\x9c\x56\xc5\x42\x22\x99\xd2\xac\xdf\x0e\xb5\x47\x68\x41\x71\xfd\x16\x86\xe6\x28\x59\x36\xb6\xe5\x8b\x2d\x51\x24\x63\x49\xcc\xf1\x6b\x98\xe9\x27\xf0\x67\x00\x3d\x65\x91\x9f\x9c\x7a\xfa\x7e\xee\xdc\xdc\x30\x32\x71\x74\xe1\xb4\xd6\x9d\xef\x62\xc4\xf3\xc6\x4b\xa9\x5e\xf4\xc4\x53\xaa\x43\xf0\x8e\xef\xcd\x4e\xe5\xa5\xe7\xc2\x98\x99\x01\xb9\x85\xe4\xf0\x2e\x83\x53\x59\xef\x21\x79\xb4\xc8\xce\x52\x9b\x1c\xed\xad\x6c\x8f\xf3\x32\x81\x4e\x98\x55\x9e\xab\x6b\xef\x1a\xf6\x0e\x0e\xeb\x3d\x5f\x7b\xda\x29\x7b\x8e\xf2\xa0\xbf\x84\x6d\xd9\x59\x4f\x79\x50\x09\xeb\x03\x0a\xed\x5c\xae\x03\xad\xf6\x18\x27\xd2\x05\xe5\xe9\x1c\x89\x4b\x66\x38\xd3\xfe\xa1\xac\x99\x69\x8d\xdc\x9b\x25\xcd\x36\x5e\x26\x5a\x42\x61\xa7\x15\xc6\x77\xe6\xe6\xf0\xc3\xe1\x85\xf4\x94\xdd\xc9\xf1\x9d\xc7\x71\xaa\x8e\x8f\x33\x99\xa0\x26\x7c\xad\x1e\x6b\x98\x7d\xff\x70\xfc\x94\xe2\x61\x6e\x46\xc0\xac\x42\x51\xa0\xe9\x03\xf9\xeb\xd8\x64\xa2\x73\xd1\xd8\x78\xa7\xbc\xb1\xec\xde\xd5\x37\xdc\x7e\x9c\xc1\xc1\x48\xfe\xa5\xa5\x6a\x4e\x88\x01\x1e\x6e\xc2\x22\x1a\x3e\x53\xf7\x3e\xe8\x2d\xda\xd4\xdb\x01\xa9\x9c\x0e\x6f\x6a\x82\xa0\xe3\x0b\x13\x59\x7a\xbd\xa9\xc5\x9e\xef\x54\xf9\xfa\xdc\x69\xb0\xba\x41\x76\x63\xb5\x3d\x5e\xef\x72\xeb\xc1\x66\xc2\x60\x56\xf3\xfd\xa4\x1c\x24\x9a\xbf\x5a\x34\xdc\xea\x12\xca\xb7\x28\x22\x69\x4a\x7e\x12\x38\xf7\x01\x0e\x33\x2f\xa9\x32\xda\x74\xd6\x3f\x3f\xe1\x77\x35\x4a\xef\x08\x9f\x3f\x8f\x9f\x8a\x0d\xb9\x5b\x59\x9f\x90\x3d\x10\xd4\x84\xcb\xb7\x67\xb2\xf8\x93\xd3\xc1\xa4\xf9\xfa\x4a\x15\x7c\x9d\xa2\x2c\x48\x67\x0f\x6f\x70\xa2\x9d\xd0\x71\x4f\xcc\x70\x12\xe8\x64\xa3\xf5\x6c\x76\xf3\x90\xc9\xbc\xa7\x50\xd4\x57\x30\xe1\xca\xca\xf7\xd9\x27\x99\xcd\x51\x69\x1b\x14\x45\x56\x0a\x59\x77\x66\x50\xed\x08\x59\xfb\x4a\x8d\xa6\x7d\xde\xb4\x91\x5b\x7e\x3c\x51\x23\xe5\x54\x73\x5d\x65\xfa\xb3\xb9\x50\x0f\xa0\xa3\xe9\x87\xd7\x2a\xad\xfa\x86\xfb\x41\xb3\x3b\x3e\x72\x20\x24\x4a\xab\xaf\xfb\x3b\x35\xbe\x8f\x52\xce\x48\xb4\x43\xe9\x84\xe7\x21\x27\x89\xc7\xc3\x4e\xe5\x43\xdc\x26\x0e\xcf\xce\x4c\x07\x1f\xeb\x00\xc7\xdd\xdd\x58\x81\xa4\xbe\xf0\x3d\x99\xf9\xbc\x4c\xa5\xf2\xb5\xa7\x54\x0e\x37\x68\x7a\x2e\xaa\x38\x05\x61\x0a\x76\xc2\xa6\x1e\xd6\x5c\x53\x89\x5d\x80\x0c\x35\x52\xa8\x8f\x56\x47\x52\x98\x81\xaf\xa4\x84\xfa\xc4\x94\x30\x81\x4e\x78\x4a\x33\xb3\xc9\xe0\xb8\x60\xfa\x23\x32\x41\x2e\x00\xfe\xd8\x34\x30\xd3\xaa\xde\x3f\x1c\xeb\x89\x0e\x77\xc7\xa7\x94\x0f\xab\x57\xbc\x1b\x67\x97\xc3\x0d\x9f\x98\x5a\xaa\xae\xf1\xf7\xad\x27\xc8\x24\x82\x4e\x59\x9f\x7f\x41\x19\xa3\xba\x66\x8d\x86\x75\x3d\xe8\xb9\xbf\xff\xd5\xe4\x1b\xec\xed\x23\x0b\x19\xaa\xec\xc3\xc1\x86\x17\x34\xbd\x0d\xf5\x05\x3e\x5f\x34\xfb\xbb\xe7\x22\xb2\x9b\x97\x0e\x78\x74\xaa\xef\x48\xa0\x53\x1e\x75\xcd\xbc\xe7\x78\x7c\xfd\x32\xcf\xbd\xc7\x79\x89\xd4\xba\x49\xec\x1a\xdd\x44\x1d\xf4\x6d\x1e\x50\xca\xb6\xee\x8c\xa8\xd3\x5b\xbc\x23\xbc\x9f\xbf\x2d\x63\x84\xad\xe8\xec\x09\x89\x15\x83\x9d\xcb\xc1\x5f\x04\xf7\x2e\xc6\x2f\x0a\x4f\x49\xd7\x79\x45\xb2\xdf\xb7\xa1\xab\x56\x61\x40\x25\x2d\x88\x9a\xa2\xe4\xde\x6f\xbf\xb8\x04\xdf\xc7\x3b\xf5\x7e\x30\x1d\x7c\xdc\xd9\xa2\x94\xdd\x0f\x4f\xf7\xcc\x6b\xe3\x1d\xfb\x71\x7e\x45\xc8\x89\x1e\x1a\xdc\x9c\x69\xc5\x1f\x03\xaa\x3e\x55\x0a\x79\x47\x78\x78\x78\x8c\x9f\x81\x55\x59\xff\x40\x20\x71\xd6\x3f\xb2\x0e\xac\x9c\x3c\x20\x98\x12\x18\xf2\x80\x79\x97\xb2\xc9\x07\x16\x07\xce\xd5\x5a\x9c\xe0\xfd\x3c\xdc\x94\x6b\x67\xf3\x8c\xd0\x84\x7a\x31\x5e\xbc\x72\xdc\xe1\x27\x6b\xc7\x13\x34\xff\xfa\x28\x06\x8f\x09\x86\xbe\xba\xb3\x1d\x3f\x13\x2b\xbb\xba\xde\xa7\x75\xfd\xa9\x2d\x9e\x50\x3b\x33\xd8\x8c\xa6\x9c\x7d\x68\x8b\xc1\x5f\xf9\x08\xba\xde\xfb\xbb\x4b\xae\x4b\xea\x3a\xc6\x55\x7e\xf1\x73\x8c\x05\x0c\x9b\xf9\x03\x1c\xda\x08\x8f\x4e\x5d\x89\x41\xdb\x9d\x52\xa4\x79\xb8\x73\x9d\xc9\x47\x5e\x75\xb6\x37\x39\xc3\x95\xf8\x0a\xee\x31\xbe\xc4\x9f\x68\xea\x4c\xc2\xf8\x3d\xde\xc4\xa2\x8b\x9f\x3d\x1c\xe5\x59\x0f\x3b\x6d\xcf\xdd\x33\x6e\xcf\x4d\x17\x3e\x45\xed\x89\x9f\x6f\x14\xd2\xf2\x77\x04\x45\x48\x79\x74\xaa\x87\xff\xd3\xa6\x57\xc8\xdc\x09\xe5\xe1\x93\x5a\x07\x94\xa3\xf9\x0b\xf5\xde\xba\x3c\xb5\xe1\xc7\x16\xf7\x99\x17\xaf\x3b\x60\x7e\xc4\x4a\x85\xec\xe6\x11\x58\xc3\xba\x78\x81\x51\xea\xba\xd6\x3b\x4e\xbf\x9f\xda\x28\x29\xff\xb6\xfe\x04\x31\x79\xc0\xa9\x2c\xaa\xae\x9c\x19\x3c\xd7\xc0\x85\x2a\x74\x23\x7f\x0f\xf7\x01\x5f\x96\x8a\x28\xed\x32\x54\xba\xdb\x54\x0f\x3d\xb4\x71\xe0\x61\xe6\x8c\x60\xf8\x18\x45\x44\x1e\x1d\xd6\x97\x7e\x34\x4a\xc5\x1b\x82\x5f\xdd\x4b\x23\xc0\x24\xbb\x38\xa9\x05\x3b\xdb\x7d\x9d\x6d\xbe\x3e\x98\xa2\xd4\x82\xbf\xa6\x81\xad\xf6\x6f\x14\x08\xed\x23\x3a\xb0\x31\xc8\x12\x9a\x62\x78\x45\xe8\xef\xf2\xa2\x8f\xe1\xe9\x01\x19\x2a\x44\x0e\xf0\xd3\x1f\x83\x4d\xbc\xc9\xe1\xe2\xfb\xf7\xc8\x5c\xec\xd6\x8d\x74\x0e\x4d\x36\xc1\x76\xe9\x03\x74\x04\xf0\x05\x70\xdc\xca\xe5\x94\xd6\x12\x3e\xdd\xca\x96\x5b\x01\xb2\x6f\xc9\x0e\xc5\x75\x7a\x9f\xf8\xc1\x16\xf1\x7c\x87\xf8\xcb\xe4\xf7\x7f\xd4\x26\x7e\xbc\x42\xdc\x83\xf0\x5c\x9d\xb8\x07\xcd\x23\xd4\x22\x62\x3a\x5b\x33\x9c\xde\x6c\x6a\xac\xb5\x3e\xc1\x9c\x7b\xd8\x89\x56\xb8\x41\x83\x67\x2c\xfd\xcf\xbc\xc8\xc2\xae\x42\x8e\xeb\xda\xb0\x70\x9c\xe6\x4f\x8c\xa2\x47\x1f\x7d\x94\xd4\x7b\x2f\xfe\x0a\xd0\x7f\x98\x24\xf9\xf2\x78\xaa\x79\x23\x5f\x7c\xcf\xd5\x0b\x6f\xa1\xc8\x74\x59\xae\x60\xf1\x5e\x6b\x66\x46\xf2\x6d\x61\x1a\x74\x59\x1e\xb6\x7a\xe2\x42\xf5\xe0\x3a\x35\x66\xe6\xc9\x91\x68\x04\x3e\x65\x69\x9a\x9d\x9b\x9a\x1f\x3f\x3b\x5c\x45\xe9\xa4\x0f\x24\xe2\xc7\x83\xe9\xf3\x36\xad\xbe\x19\x33\xe6\x14\x1e\xdf\x24\x74\x3d\xa2\x73\xf9\x7d\x1a\x8e\xc4\xfb\x2d\x1a\xcb\xdf\xa5\x1d\xe3\x7a\x00\x9c\x30\x6f\xfb\x25\xcd\x87\x68\xd1\x01\xf9\xe8\x9b\xa1\x63\xac\x8b\x3b\xef\x3f\x15\xeb\x87\x92\xe1\xc7\x53\x86\xa7\xfa\x47\x0f\xc9\x70\xd3\x33\xea\xb3\x1b\xb1\xaf\x39\xf5\xf2\xa7\x0c\x4f\xf7\x65\x09\x42\xf5\x2f\x98\xc8\xfd\x84\xb7\x39\x97\xa0\xe7\x98\xe2\x97\xf1\xc5\xc8\x4e\x9e\x70\xd5\xd2\x0a\x63\x87\xb7\x2b\xe3\x27\xd8\x01\xdd\xe8\x19\x0a\xad\x98\x3e\xc2\xe9\x5c\xa6\xcb\xcc\xd0\x01\x12\xae\x7f\xf0\x6a\x9b\x5e\x2a\xc6\x4f\x3a\xf8\x7c\xa2\xee\x30\x5e\xe5\x97\xfe\x25\x8d\x2a\x86\xbf\x0f\xf3\xda\xd0\xd1\x0c\x62\x19\x07\xa3\xc8\x2d\xfb\x00\x02\x0f\x33\xc8\x8b\xc7\xa1\x23\xe5\xbd\x3d\xf3\x9d\x3e\x40\xf7\x3f\x01\x00\x00\xff\xff\x3c\x2b\x25\xc5\x12\x3f\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 16146, mode: os.FileMode(420), modTime: time.Unix(1494960457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

